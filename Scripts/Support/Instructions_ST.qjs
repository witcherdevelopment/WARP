/**************************************************************************\
*                                                                          *
*   Copyright (C) 2020-2021 Neo-Mind                                       *
*                                                                          *
*   This file is a part of WARP project                                    *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author(s)     : Neo-Mind                                               *
*   Created Date  : 2020-11-01                                             *
*   Last Modified : 2021-04-04                                             *
*                                                                          *
\**************************************************************************/

  //==================//
 // Helper functions //
//==================//

///
/// \brief Creates functions for all provided instructions using the name (first arg) & index
///
const _define_with = function(name)
{
	for (let idx = 1; idx < arguments.length; idx++)
	{
		let opName = arguments[idx];
		if (opName.length === 0)
			continue;

		Assign(
			opName,
			`function(){ return ${name}(${idx-1}, arguments) }`
		);
	}
};

///
/// \brief Creates functions for all provided instructions using the name (first arg), opcodes (second arg) & index
///
const _define_with_oc = function(name, oc)
{
	for (let idx = 2; idx < arguments.length; idx++)
	{
		let opName = arguments[idx];
		if (opName.length === 0)
			continue;

		Assign(
			opName,
			`function(){ return ${name}(${oc}, ${idx-2}, arguments) }`
		);
	}
};

  //======================================//
 // Float only - Arithmetic & Comparison //
//======================================//

_define_with('_st_arith_cmp',
	'FADD', 'FMUL', 'FCOM', 'FCOMP',
	'FSUB', 'FSUBR', 'FDIV', 'FDIVR'
);

///
/// \brief Creates hex for Arithmetic & Comparison operations with float arguments alone (memory or ST registers)
///
_st_arith_cmp = (oper, args) =>
{
	let data = new OpData(args, false, true);

	let opCode;
	switch (data.OpType)
	{
		case OpTypes.R_R:
			if (data.OpSize !== 80 || oper === 2 || oper === 3)//reg,reg not allowed for FCOM & FCOMP
				break;

			if (data.TgtReg.Index > 0)
			{
				opCode = 0xDC;
			}
			else
			{
				opCode = 0xD8;
				data.TgtReg = data.SrcReg;
			}
			data.OpType = OpTypes.R; //ignore the source reg
			break;

		case OpTypes.P:
			if (data.OpSize == 32)
				opCode = 0xD8;

			else if (data.OpSize == 64)
				opCode = 0xDC;

			break;

		case OpTypes.A:
		case OpTypes.R:
			if (data.OpSize !== 80 || (oper !== 2 && oper !== 3))//single reg only allowed for FCOM & FCOMP
				break;

			opCode = 0xD8;

		default:
			break;
	}

	return (opCode == undefined) ? '' : Instr.FromParts(data, opCode, oper).toString();
};

  //===========================//
 // Float only - Load & Store //
//===========================//

_define_with('_st_lod_sto',
	'FLD', '', 'FST', 'FSTP', 'FLDENV',
	'FLDCW', 'FSTENV', 'FSTCW'
);

///
/// \brief Creates hex for Load & Store operations with float arguments alone (memory or ST registers)
///
_st_lod_sto = (oper, args) =>
{
	let data = new OpData(args, false, true);

	let opCode;
	switch (data.OpType)
	{
		case OpTypes.P:
			let _valid_sizes = [
				[80, 64, 32],
				[],//never used
				[64, 32],
				[80, 64, 32],
				[32],
				[16],
				[32],
				[16]
			][oper];

			if (_valid_sizes.length === 1)
			{
				data.OpSize = _valid_sizes[0];
				opCode = 0xD9;
			}
			else if (_valid_sizes.indexOf(data.OpSize) >= 0)
			{
				if (data.OpSize === 80)
				{
					opCode = 0xDB;
					oper |= 5;
				}
				else
				{
					opCode = (data.OpSize === 32) ? 0xD9 : 0xDD;
				}
			}

			break;

		case OpTypes.A:
		case OpTypes.R:
			if (oper < 4)
				opCode = 0xDD;

			break;
	}

	return (opCode == undefined) ? '' : Instr.FromParts(data, opCode, oper).toString();
};

  //=========================================//
 // Float with Integer operand (as mem ptr) //
//=========================================//

///
/// \brief Arithmetic & Comparison
///
_define_with_oc('_st_cmd_int', [0xDA, 0xDE],
	'FIADD', 'FIMUL', 'FICOM', 'FICOMP',
	'FISUB', 'FISUBR', 'FIDIV', 'FIDIVR'
);

///
/// \brief Load & Store
///
_define_with_oc('_st_cmd_int', [0xDB, 0xDF],
	'FILD', 'FISTTP', 'FIST', 'FISTP'
);

///
/// \brief Creates hex for Float functions with integer (as memory pointer)
///

_st_cmd_int = (ocD, ocW, oper, args) =>
{
	let data = new OpData(args, false, true);

	if (data.OpType === OpTypes.P)
	{
		if (data.OpSize === 16)
		{
			opCode = ocW;
		}
		else if (data.OpSize === 64 && ocD === 0xDB && oper !==	2) //Load & Store scenarios
		{
			if (oper === 1) //FISTP uses different opcode
			{
				opCode = 0xDD;
			}
			else
			{
				opCode = ocW;
				oper |= 5;
			}
		}
		else //DWORD by default
		{
			opCode = ocD;
		}

		return Instr.FromParts(data, opCode, oper).toString();
	}
	else
	{
		return '';
	}
};

  //================================//
 // Float only - Conditional Moves //
//================================//

_define_with_oc('_st_cond_mov', 0xDA,
	'FCMOVB', 'FCMOVE', 'FCMOVBE', 'FCMOVU'
);

_define_with_oc('_st_cond_mov', 0xDB,
	'FCMOVNB', 'FCMOVNE', 'FCMOVNBE', 'FCMOVNU'
);

///
/// \brief Creates hex for Conditional move float functions
///

_st_cond_mov = (opCode, oper, args) =>
{
	let data = new OpData(args, false, true);

	if (data.OpType === OpTypes.R_R && data.TgtReg.Index === 0)
	{
		return opCode.toHex(1) + (0xC0 | (oper << 3) | data.SrcReg.Index).toHex(1);
	}
	else
	{
		return '';
	}
};

  //=====================================//
 // Float only - Arithmetic + Stack Pop //
//=====================================//

_define_with('_st_arith_pop',
	'FADDP', 'FMULP', '', '',
	'FSUBRP', 'FSUBP', 'FDIVRP', 'FDIVP'
);

///
/// \brief Creates hex for Arithmetic operations which is followed by a stack pop
///
_st_arith_pop = (oper, args) =>
{
	if (args.length === 0)
	{
		return ' DE' + (0xC0 | (oper << 3) | 1).toHex(1);
	}
	else
	{
		let data = new OpData(args, false, true);

		if (data.OpType === OpTypes.R_R && data.SrcReg.Index === 0)
			return ' DE' + (0xC0 | (oper << 3) | data.TgtReg.Index).toHex(1);
	}

	return '';
};

  //==============================================//
 // Remaining Float Operations with ST registers //
//==============================================//

///
/// \brief Frees ST register and pops stack
///
FFREEP = function()
{
	let data = new OpData(arguments, false, true);

	if (data.OpType === OpTypes.R && data.TgtReg.Width === 80)
	{
		return ' DF' + (0xC0 | data.TgtReg.Index).toHex(1);
	}
	else
	{
		return '';
	}
};

IdentifyObj('FFREEP');

///
/// \brief Stores status word
///
FSTSW = function()
{
	let data = new OpData(arguments, false, true);

	switch (data.OpType)
	{
		case OpTypes.P:
			return Instr.FromParts(data, 0xDD, 7).toString();

		case OpTypes.R:
			if (data.TgtReg.is(AX))
				return ' DF E0';
	}
	return '';
};

IdentifyObj('FSTSW');

///
/// \brief Compare floats, check ordered values & set EFLAGS
///

FUCOMI = function()
{
	return _st_ord_cmp(5, arguments);
};

FUCOMIP = function()
{
	return _st_ord_cmp(6, arguments);
};

IdentifyObj('FUCOMI');
IdentifyObj('FUCOMIP');

_st_ord_cmp = (oper, args) =>
{
	let data = new OpData(args, false, true);

	if (data.OpType === OpTypes.R_R && data.TgtReg.Index === 0)
	{
		data.TgtReg = data.SrcReg;
		data.OpType = OpTypes.R;
		return Instr.FromParts(data, 0xDF, oper).toString();
	}
	else
	{
		return '';
	}
};

///
/// \brief Instructions without operands (works standalone or uses ST0 & ST1 implcitly)
///
[
	['FNOP'    , " D9 D0"],
	['FCHS'    , " D9 E0"],
	['FABS'    , " D9 E1"],
	['FTST'    , " D9 E4"],
	['FXAM'    , " D9 E5"],
	['FLD1'    , " D9 E8"],
	['FLDL2T'  , " D9 E9"],
	['FLDL2E'  , " D9 EA"],
	['FLDPI'   , " D9 EB"],
	['FLDLG2'  , " D9 EC"],
	['FLDLN2'  , " D9 ED"],
	['FLDZ'    , " D9 EE"],
	['F2XM1'   , " D9 F0"],
	['FYL2X'   , " D9 F1"],
	['FPTAN'   , " D9 F2"],
	['FPATAN'  , " D9 F3"],
	['FXTRACT' , " D9 F4"],
	['FPREM1'  , " D9 F5"],
	['FDECSTP' , " D9 F6"],
	['FINCSTP' , " D9 F7"],
	['FPREM'   , " D9 F8"],
	['FYL2XP1' , " D9 F9"],
	['FSQRT'   , " D9 FA"],
	['FSINCOS' , " D9 FB"],
	['FRNDINT' , " D9 FC"],
	['FSCALE'  , " D9 FD"],
	['FSIN'    , " D9 FE"],
	['FCOS'    , " D9 FF"],
	['FUCOMPP' , " DA E9"],
	['FNENI'   , " DB E0"],
	['FNDISI'  , " DB E1"],
	['FNCLEX'  , " DB E2"],
	['FNINIT'  , " DB E3"],
	['FCLEX'   , " 9B DB E2"],
	['FINIT'   , " 9B DB E3"],
	['FNSETPM' , " DB E4"],
	['FCOMPP'  , " DE D9"],
].forEach( pair => AssignStr(...pair) );
