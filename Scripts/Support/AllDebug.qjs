/**************************************************************************\
*                                                                          *
*   Copyright (C) 2020-2021 Neo-Mind                                       *
*                                                                          *
*   This file is a part of WARP project                                    *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author(s)     : Neo-Mind                                               *
*   Created Date  : 2020-12-11                                             *
*   Last Modified : 2021-04-04                                             *
*                                                                          *
\**************************************************************************/

// Contains various functions useful for debugging code.

///
/// \brief Enable/Disable logging of comments
///
if (typeof Log == 'undefined')
{
	Log =
	{
		Tee : false,

		start : function(file)
		{
			if ('Handle' in this)
				return true;

			file = file ?? "Comment_Log_" + System.LocalTime.toISOString().replace(/:/g, '_') + ".txt";

			let fp = new TextFile(OUTDIR + file, "w");
			if (fp.Valid)
			{
				this.Handle = fp;
				return true;
			}
			else
			{
				return false;
			}
		},

		stop : function()
		{
			if ('Handle' in this)
			{
				this.Handle.Close();
				Warp.Show(this.Handle.Path);
			}

			delete this.Handle;

			return true;
		},

		show : function()
		{
			if ('Handle' in this)
			{
				Warp.Show(this.Handle.Path);
			}
		},

		cc : function(state = true)
		{
			this.Tee = state;
			return true;
		}
	};
};

///
/// \brief Function for logging comments in patch & extension functions (including supporting functions) and console if requested
///
$$ = function(txt)
{
	if (txt != undefined)
	{
		if ('Handle' in Log)
			Log.Handle.WriteLine(txt);

		if (Log.Tee)
			console.info(txt);
	}
};

///
/// \brief Same as above but always reports to console as well
///
$$$ = function(txt)
{
	if (txt != undefined)
	{
		if ('Handle' in Log)
			Log.Handle.WriteLine(txt);

		console.info(txt);
	}
};

///
/// \brief Function for adding Headers or Just Underlines to Logs and console if requested.
///
$_ = function()
{
	let args = [...arguments];

	let tee = args.take_if('boolean', Log.Tee);
	let msg = args.shift();
	let bold = args.take_if('boolean', false);
	let chr = args.take_if('string', '+');

	let len = 0;
	switch (typeof msg)
	{
		case 'number':
			len = msg;
			break;

		case 'string':
			len = msg.length;

			if ('Handle' in Log)
				Log.Handle.WriteLine(msg);

			if (tee)
			{
				if (bold)
					console.info("<b>" + msg + "</b>");
				else
					console.info(msg);
			}
			break;
	}

	if (len > 0)
	{
		let line = chr.repeat(len);
		if ('Handle' in Log)
			Log.Handle.WriteLine(line);

		if (tee)
		{
			if (bold)
				console.info("<b>" + line + "</b>");
			else
				console.info(line);
		}
	}
};

///
/// \brief Same as above just added the 'Tee' override directly
///
$__ = function()
{
	$_(true, ...arguments);
};

///
/// \brief Same as $_ but add the line on top and bottom
///
_$_ = function(tee, msg)
{
	let args = Array.prototype.slice.call(arguments, 2);
	if (typeof tee !== 'boolean')
	{
		args.unshift(msg);
		args.unshift(tee.length);
	}
	else
	{
		args.unshift(msg.length);
		args.unshift(tee);
	}

	$_(...args);
	$_(...arguments);
};

///
/// \brief Dump all the hex codes of a function in Output view and/or Log file
///
DumpFunc = function(funcName, from)
{
	$$(funcName + " = {");

	let to = Exe.GetSectEnd(CODE);
	while (from < to)
	{
		let ins = Instr.FromAddr(from);
		if (ins.Codes[0] === 0xC3 || ins.Codes[0] === 0xC2)
			break;

		$$(TAB + ins);

		from = ins.NextAddr;
	}

	$$('}');
};

// For all the following, the output will be send using 'console'

///
/// \brief Aliases
///
Debug = console.log;
Info = console.info;

///
/// \brief Write an empty line
///
NewLine = () => console.info('') || true;

///
/// \brief Dump the key and value pairs of an object.
///
Dump = function(name, obj)
{
	if (obj == undefined) //can be 0 or false so cant use !obj
	{
		obj = name;
		name = obj.constructor.name;
	}
	else if (IsStr(name))
	{
		if (name.isEmpty())
		{
			name = obj.constructor.name;
		}
		else
		{
			name = name + " (" + obj.constructor.name + ")";
		}
	}
	else
	{
		name = obj.constructor.name;
	}

	if (obj == undefined) //can be 0 or false so cant use !obj
		return false;

	console.log(name, "=>");

	for (key in obj)
	{
		let val = obj[key]
		if (IsArr(val))
		{
			ShowArr(val, TAB, key, true);
		}
		else
		{
			if (IsStr(val))
				val = `"${val}"`;

			console.info(TAB, key, "=>", val);
		}
	}

	return true;
};

///
/// \brief Displays all the elements in the array hierarchically.
///
ShowArr = function()
{
	let args = [...arguments];

	let arr = args.last();
	if (!IsArr(arr))
		return false;

	let useInfo = args.take_if('boolean', false);
	let indent = args.take_if('number', 0);
	let name = args.take_if('string', 'Array');

	let prefix = TAB.repeat(indent);
	if (useInfo)
		console.info(prefix, name, "= [");
	else
		console.log(prefix, name, "= [");

	arr.forEach( (item, index) =>
	{
		if (IsArr(item))
		{
			ShowArr(true, indent+1, index.toString(), item);
		}
		else
		{
			if (IsStr(item))
				item = `"${item}"`;

			console.info(prefix, TAB, index, "=>", item);
		}
	});

	console.info(prefix, ']');

	return true;
};

///
/// \brief Show the variable provided (wrapped in {}) and it's value.
///
ShowVar = function()
{
	let args = [...arguments];
	let obj = args.last();

	if (typeof obj !== 'object')
		return false;

	let [varName] = Object.keys(obj);
	if (!varName)
		return false;

	let prefix = args.take_if('string', '');

	let value = obj[varName];
	if (IsArr(value))
	{
		console.info(prefix, varName, "= [");

		value.forEach( (elem, idx) =>
			ShowVar(prefix + TAB, {[idx] : elem})
		);

		console.info(prefix, ']');
	}
	else
	{
		if (IsStr(value))
			value = `"${value}"`;

		console.info(prefix, varName, "=>", value);
	}

	return true;
};

///
/// \brief Shows the physical and virtual cntparts of an address.
///        You can also provide variable wrapped in {} to display it's name as the prompt.
///
ShowAddr = function()
{
	let args = [...arguments];

	let prompt, addr;
	let obj = args.take_if('object', null);
	if (obj === null)
	{
		prompt = args.take_if('string', 'Addr');
		addr = args.take_if('number', -1);
	}
	else
	{
		prompt = Object.keys(obj)[0];
		addr = obj[prompt];
	}

	let type = args.take_if('object', PHYSICAL);

	let phy, vir;
	if (type === PHYSICAL)
	{
		phy = addr;
		vir = Exe.Phy2Vir(addr);
	}
	else
	{
		phy = Exe.Vir2Phy(addr);
		vir = addr;
	}

	if (phy >= 0)
		phy = "0x" + phy.toString(16);

	if (vir >= 0)
		vir = "0x" + vir.toString(16);

	console.info(prompt, "=>", phy, '(', vir, ')');
};

///
/// \brief Shows the physical and virtual counterparts of multiple addresses
///
ShowAddrs = function()
{
	let args = [...arguments];

	let prompt = args.take_if('string', 'Addrs');

	let addrs = args.shift();
	if (!IsArr(addrs))
	{
		if (typeof(addrs) === 'object')
		{
			prompt = Object.keys(addrs)[0];
			addrs = addrs[prompt];
		}
	}

	if (!IsArr(addrs))
		return false;

	let isPhy = (args.take_if('object', PHYSICAL) === PHYSICAL);

	console.info(prompt, "= [");
	addrs.forEach( (addr, i) =>
	{
		if (!IsNum(addr))
			return;

		let phy, vir;
		if (isPhy)
		{
			phy = addr;
			vir = Exe.Phy2Vir(addr);
		}
		else
		{
			phy = Exe.Vir2Phy(addr);
			vir = addr;
		}

		if (phy >= 0)
			phy = "0x" + phy.toString(16);

		if (vir >= 0)
			vir = "0x" + vir.toString(16);

		console.info(TAB, i, "=>", phy, '(', vir, ')');
	});

	console.info(']');

	return true;
};

///
/// \brief Reset the internal counter.
///
ResetC = () => (console.cnt = 0) || true;

///
/// \brief Increment the counter.
///
IncrC = () => (console.cnt = (console.cnt || 0) + 1) || true;

///
/// \brief Display the current count along with version & build date.
///
ShowC = () => console.log('cnt' in console ? console.cnt : 'Counter not set', Exe.Version, Exe.BuildDate) || true;
