/**************************************************************************\
*                                                                          *
*   Copyright (C) 2020-2021 Neo-Mind                                       *
*                                                                          *
*   This file is a part of WARP project                                    *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author(s)     : Neo-Mind                                               *
*   Created Date  : 2020-10-29                                             *
*   Last Modified : 2021-06-17                                             *
*                                                                          *
\**************************************************************************/

  //=========//
 // Testers //
//=========//

///
/// \brief Tests for primitive types & array (alias)
///
IsNum  = v => typeof v === 'number';
IsStr  = v => typeof v === 'string';
IsBool = v => typeof v === 'boolean';
IsArr = v => v != undefined && v.join != undefined;

IsNumOrStr = v =>
	typeof v === 'number' || typeof v === 'string';

///
/// \brief Tests whether given variable contains a word either as number or hex string
///        (for hex string it will be 2 bytes inside)
///
IsWord = function(v, signed = true)
{
	switch (typeof v)
	{
		case 'number':
			return signed ?
				(v >= -0x8000 && v < -0x80) || (v > 0x7F && v <= 0x7FFF) :
				(v >= 0 && v <= 0xFFFF)
			;

		case 'string':
			return v.byteCount() === 2;
	}

	return false;
};

///
/// \brief Tests whether given variable contains a byte either as number of hex string
///        (for hex string it will be 1 byte inside)
///
IsByte = function(v, signed = true)
{
	switch (typeof v)
	{
		case 'number':
			return signed ?
				(v >= -0x80 && v <= 0x7F) :
				(v >= 0 && v <= 0xFF)
			;

		case 'string':
			return v.byteCount() === 1;
	}

	return false;
};

  //==================//
 // Filler functions //
//==================//

///
/// \brief Creates a filler hex string with the given index and byte count
///
Filler = (idx, bc = 4) =>
	(' ??'.repeat(Math.abs(bc)) + (idx < 16 ? ' ?' : ' ') + idx.toString(16)).slice(-3 * Math.trunc(Math.abs(bc)));

///
/// \brief Background function for performing multiple swaps
///
_swap_ = function(str, find, repl, cnt, bc)
{
	if (repl == undefined)
		return str;

	let data, dataSet;
	let needNext = Array.isArray(repl);
	if (needNext)
	{
		dataSet = [...repl]; //create a deep copy
		cnt = dataSet.length;
		data = dataSet.shift();
	}
	else
	{
		data = repl;
	}

	if (typeof data === 'number')
		data = data.toHex(bc);
	else if (data != undefined) //can be undefined to skip a match in an array
		data = data.toString();

	for (let pos = 0; cnt != 0; cnt--)
	{
		pos = str.indexOf(find, pos);
		if (pos < 0)
			break;

		if (data == undefined)
			pos += find.length;
		else
			str = str.replaceAt(pos, data, find.length);

		if (needNext)
		{
			data = dataSet.shift();

			if (typeof data === 'number')
				data = data.toHex(bc);
			else if (data != undefined)
				data = data.toString();
		}
	}

	return str;
};

///
/// \brief Swaps out the filler hex string with the actual data. Input can be single hex string or split up into parts
///
SwapFiller = function(str, idx, dataSet, cnt = -1)
{
	let _ = 'SwapFiller : ';

	$$(_ + '1.1 - If specified as an array, then concatenate it')
	if (IsArr(str))
		str = str.join('');

	$$(_ + '1.2 - Ensure we actually have a string')
	if (!IsStr(str))
		return str;

	$$(_ + '1.3 - If idx is specified in the form [index, bytecount] then extract them')
	let bc = 4;
	if (IsArr(idx))
	{
		bc = idx[1];
		idx = idx[0];
	}

	$$(_ + '1.4 - Ensure that idx & bc are integers')
	if (typeof idx !== 'number' || typeof bc !== 'number')
		return str;

	$$(_ + '2.1 - Create the filler string to search')
	let find = Filler(idx, bc);

	$$(_ + '2.2 - Return the updated string')
	return(_swap_(str, find, dataSet, cnt, bc));
};

///
/// \brief Same as SwapFiller but with multiple substitutions at once.
///
SwapFillers = function(str, idMap, cnt = -1, bc = 4)
{
	let _ = 'SwapFillers : ';

	$$(_ + '1.1 - If specified as an array, then concatenate it')
	if (IsArr(str))
		str = str.join('');

	$$(_ + '1.2 - Ensure we actually have a string')
	if (!IsStr(str))
		return str;

	for (key in idMap)
	{
		$$(_ + '2.1 - Get the idx and ensure it is a proper integer')
		let idx = parseInt(key);
		if (Object.is(idx, NaN))
			continue;

		$$(_ + '2.2 - Get the dataSet corresponding to the id')
		let dataSet = idMap[idx];

		$$(_ + '2.3 - Create the filler string to search')
		let find = Filler(idx, bc);

		$$(_ + '2.4 - Make the substitution')
		str = _swap_(str, find, dataSet, cnt, bc);
	}

	return str;
};

///
/// \brief Background function for performing multiple swaps for same target address
///
_settgt_ = function(strParts, pat, target, start, cnt, bc)
{
	let patParts = pat.trim().split(/ +/g);
	let swapped = false;

	let pos = 0;
	while (pos <= strParts.length - patParts.length && cnt != 0)
	{
		if (patParts.find( (elem, i) => elem !== strParts[pos + i] ) == undefined)
		{
			swapped = true;

			let repl = (target - (start + pos + bc)).toHex(bc).trim().split(' ');
			repl.forEach( (elem, i) => strParts[pos + i] = elem);
			cnt--;

			pos += bc;
		}
		else
		{
			pos++;
		}
	}

	return swapped;
};

///
/// \brief Swaps out the filler hex string with delta values (after JMPs & CALLs) for a target address
///
SetFillTarget = function(str, idx, target, start, cnt = -1)
{
	let _ = 'SetFillTarget : ';

	$$(_ + '1.1 - If specified as an array, then concatenate it')
	if (IsArr(str))
		str = str.join('');

	$$(_ + '1.2 - Ensure we actually have a string')
	if (!IsStr(str))
		return str;

	$$(_ + '1.3 - If idx is specified in the form [index, bytecount] then extract them')
	let bc = 4;
	if (IsArr(idx))
	{
		bc = idx[1];
		idx = idx[0];
	}

	$$(_ + '1.4 - Ensure that idx, bc, target and start are integers')
	if (typeof idx !== 'number' || typeof bc !== 'number' || typeof target !== 'number' || typeof start !== 'number')
		return str;

	$$(_ + '1.5 - Limit the byte count')
	bc = Math.min(bc, 4);

	$$(_ + '2.1 - Create the filler string to search')
	let find = Filler(idx, bc);

	$$(_ + '2.2 - Split the string into parts based on spacing')
	let strParts = str.trim().split(/ +/g);

	$$(_ + '2.3 - Update the array')
	let swapped = _settgt_(strParts, find, target, start, cnt, bc);

	$$(_ + '2.4 - Reconstitute the string and return if any swap happened. Otherwise return the original')
	if (swapped)
		return ' ' + strParts.join(' ');
	else
		return str;
};


///
/// \brief Same as SwapFiller but with multiple substitutions at once.
///
SetFillTargets = function(str, idMap, start, cnt = -1, bc = 4)
{
	let _ = 'SetFillTargets : ';

	$$(_ + '1.1 - If specified as an array, then concatenate it')
	if (IsArr(str))
		str = str.join('');

	$$(_ + '1.2 - Ensure we actually have a string')
	if (!IsStr(str))
		return str;

	$$(_ + '1.3 - Limit the byte count')
	bc = Math.min(bc, 4);

	$$(_ + '1.4 - Split the string into parts based on spacing')
	let strParts = str.trim().split(/ +/g);

	let swapped = false;
	for (key in idMap)
	{
		$$(_ + '2.1 - Get the idx and ensure it is a proper integer . Key = ' + key)
		let idx = parseInt(key);
		if (Object.is(idx, NaN))
			continue;

		$$(_ + '2.2 - Get the target corresponding to the id & ensure its an integer')
		let target = idMap[idx];
		if (typeof target !== 'number')
			continue;

		$$(_ + '2.3 - Create the filler string to search')
		let find = Filler(idx, bc);

		$$(_ + '2.4 - Update the array')
		swapped = _settgt_(strParts, find, target, start, cnt, bc) || swapped;
	}

	$$(_ + '3 - Reconstitute the string and return if any swap happened. Otherwise return the original')
	if (swapped)
		return ' ' + strParts.join(' ');
	else
		return str;
};

  //============//
 // Converters //
//============//

///
/// \brief Wraps the given value into an array unless its already one.
///
Wrap = v =>
	v == undefined      ? [ ] :
	v.join != undefined ?  v  :
	                      [v] ;


  //=============//
 // Calculators //
//=============//

///
/// \brief Calculate the bit width of the argument which can be a number, string or register object
///
BitWidth = function(v)
{
	let _ = `BitWidth (${v}) : `;

	$$(_ + '1 - If the value provided is a register then simply return its width')
	if (IsReg(v))
		return v.Width;

	switch (typeof v)
	{
		case 'number':

			$$(_ + '2 - For numbers, check within specific limits for each size')
			return (
				v >= -0x80 && v <= 0x7F ? 8 :
				v >= -0x8000 && v <= 0x7FFF ? 16 :
				32
			);

		case 'string':

			$$(_ + '3 - For hex string return the byte count * 8')
			let bc = v.byteCount();
			if (bc >= 0)
				return (8 * bc);
	}

	$$(_ + '4 - Return -1 for invalid cases')
	return -1;
};

///
/// \brief Calculates the Distance between the given target and source (if not numbers then then target itself is returned)
///
Distance = (tgt, src) =>
	typeof tgt === 'number' && typeof src === 'number' ? tgt - src : tgt;


///
/// \brief Calculate the addresses for various indices in the array of hex strings (instructions).
///
MapAddrs = function(start, arr)
{
	if (IsArr(arr))
	{
		let offset = 0;
		let result = arr.map( hex =>
		{
			let addr = start + offset;

			if (typeof hex === 'string')
				offset += hex.byteCount();

			return addr;
		});

		return [...result, start + offset];
	}
	else
	{
		return [];
	}
};

  //============//
 // Extractors //
//============//

///
/// \brief Extract the switch jump address for the specified case
///
CaseAddr = function(num, movzxAddr, retnType, jmpDpAddr)
{
	let _ = 'CaseAddr : ';

	$$(_ + '1.1 - Extract the MOVZX instruction')
	let movzxIns = movzxAddr > 0 ? Instr.FromAddr(movzxAddr) : '';

	$$(_ + '1.2 - Ensure the address for JMP DWORD PTR is valid')
	if (!jmpDpAddr)
	{
		if (movzxIns === '')
			return -1;

		jmpDpAddr = movzxIns.NextAddr;
	}

	$$(_ + '1.3 - Extract the JMP DWORD PTR instruction')
	let jmpDpIns = Instr.FromAddr(jmpDpAddr);

	$$(_ + '2.1 - Based on the case extract the byte being used in JMP DWORD PTR')
	let caseByte = num;
	if (movzxIns !== '')
	{
		let offset = Exe.Vir2Phy(movzxIns.Disp);
		if (offset < 0)
			return -1;

		caseByte = Exe.GetInt8(offset + num);
	}

	$$(_ + '2.2 - Use the byte retrieved to extract the case target address (VIRTUAL)')
	let offset = Exe.Vir2Phy(jmpDpIns.Disp);
	if (offset < 0)
		return -1;

	let caseAddr = Exe.GetInt32(offset + caseByte*4);

	$$(_ + '2.3 - Return the physical address if VIRTUAL is not explicity requested')
	return (retnType === VIRTUAL ? caseAddr : Exe.Vir2Phy(caseAddr));
};

  //===========//
 // Utilities //
//===========//

///
/// \brief Parses the data provided into 4 part array (first 3 being either M,R,M or S,I,B)
///        Data could be number, string or array of 3 values
///
ParseData = function(data, scaled)
{
	let _ = `ParseData (${data}, ${scaled}) : `;

	$$(_ + '1 - Initialize the parts')
	let parts = [null, null, null, -1];

	$$(_ + '2 - If the data is an array then process differently')
	if (Array.isArray(data))
	{
		$$(_ + '2.1 - Ensure it has 3 values and first one is a number')
		if (data.length === 3 && typeof data[0] === 'number')
		{
			$$(_ + '2.2 - First copy the array as is')
			parts = data.slice();

			$$(_ + '2.3 - Extract the numbers from the parts')
			let p0 = scaled ? (Math.log(data[0]) / Math.log(2)) : data[0];
			let p1 = IsReg(data[1]) ? data[1].Index : data[1];
			let p2 = IsReg(data[2]) ? data[2].Index : data[2];

			$$(_ + '2.4 - Construct the hex string and save as the 4th element')
			if (p1 < 0 || p2 < 0) //when either is negative we need to use wildcards
			{
				parts[3] =
					' ['
				+	p0.toBits(2)
				+	(p1 < 0 ? '...' : p1.toBits(3))
				+	(p2 < 0 ? '...' : p2.toBits(3))
				+	']'
				;
			}
			else
			{
				parts[3] = p0 << 6 | p1 << 3 | p2;
			}
		}

		$$(_ + '2.5 - Return the array')
		return parts;
	}

	$$(_ + '3 - Process string type')
	if (typeof data === 'string')
	{
		$$(_ + '3.1 - First remove any square brackets')
		data = data.replace(/[\[ \]]+/g, '');

		if (data.length > 2)
		{
			$$(_ + '3.2 - If more than 2 chars present then its in bitwise format')

			if (data.includes('.'))
			{
				$$(_ + '3.3 - Dot is wildcard for bitwise mode, if present we need to parse each part individually')

				let bits = data.substr(0, 2); //first 2 bits
				if (!bits.includes(2))
				{
					bits = parseInt(bits, 2);
					if (scaled)
						bits = Math.pow(2, bits);
				}
				parts[0] = bits;

				bits = data.substr(2, 3); //middle 3 bits
				if (!bits.includes('.'))
					bits = parseInt(bits, 2);

				parts[1] = bits;

				bits = data.substr(5, 3); //last 3 bits
				if (!bits.includes('.'))
					bits = parseInt(bits, 2);

				parts[2] = bits;

				$$(_ + '3.4 - Since the data is already the hex string, save it as the fourth element')
				parts[3] = data;
			}
			else
			{
				$$(_ + '3.5 - If no wildcard then we can convert the data into a number. Next section will parse it into the parts')
				data = parseInt(data, 2);
			}
		}

		else if (data[0] === '?' || data[1] === '?')
		{
			$$(_ + '3.6 - If wild card characters (?) are present then parse each nibble individually')

			if (data[0] === '?')
			{
				parts[0] = '..';
				parts[1] = '..';
			}
			else
			{
				let hb = parseInt(data[0], 16); //Higher byte
				let bits = (hb >> 2) & 0b11; 	//First 2 bits
				if (scaled)
					bits = Math.pow(2, bits);

				parts[0] = bits;
				parts[1] = hb.toBits(2); //Bits 5 & 4  (part of Middle 3 bits)
			}

			if (data[1] === '?')
			{
				parts[1] += '.';
				parts[2] = '...';
			}
			else
			{
				let lb = parseInt(data[1], 16);

				parts[1] += (lb >> 3).toBits(1); //Bit 3 (part of Middle 3 bits)
				parts[2] = lb & 0b111;	//Last 3 bits
			}

			$$(_ + '3.7 - And ofcourse save the data as the fourth element')
			parts[3] = data;
		}

		else
		{
			$$(_ + '3.8 - If no wildcards for bytes then convert to number')
			data = parseInt(data, 16);
		}
	}

	$$(_ + '4 - Process Number type (Integer to be more precise)')
	if (typeof data === 'number')
	{
		parts[0] = (data >> 6) & 0b11; 	//First 2 bits
		parts[1] = (data >> 3) & 0b111;	//Middle 3 bits
		parts[2] = (data     ) & 0b111;	//Last 3 bits
		parts[3] = data;
	}

	return parts;
};

///
/// \brief Search for a particular instruction using a testing function provided
///
FindInstr = function(testFn, from, to)
{
	$$(`FindInstr (${testFn}}, ${from}, ${to})`, true);

	if (typeof testFn !== 'function' || typeof from !== 'number')
		return false;

	to = to ?? Exe.GetSectEnd(CODE);

	while (from < to)
	{
		let ins = Instr.FromAddr(from);
		if (testFn(ins))
			return ins;

		from = ins.NextAddr;
	}

	return false;
};

///
/// \brief Get the 'nth' instruction after the specified one. You can specify either the address or the Instr object itself
///
GetInstr = function(current, n)
{
	if (typeof(current) === 'number')
		current = Instr.FromAddr(current);

	for (; n > 0; n--)
	{
		current = Instr.FromAddr(current.NextAddr);
	}

	return current;
};

///
/// \brief Throws a cancellation warning with the specified argument.
///        If default value is specified then a 'reverted' message is thrown.
///
Cancel = (arg, defVal) =>
{
	if (arg == undefined)
		throw `Cancelled`;
	else if (defVal == undefined)
		throw `Cancelled - ${arg}`;
	else
		throw `Cancelled - <b>'${arg}'</b> reverted to <b><i>${defVal}</i></b>`;
};

  //====================//
 // Syntax Identifiers //
//====================//

///
/// \brief Simple wrapper
///
Identify = Warp.identify;

///
/// \brief Adds a class and all its properties to SyntaxAssistant
///        for identification in the Script Editor
///
IdentifyClass = (type, props = []) =>
	Warp.identify(
		type.name,
		Object.getOwnPropertyNames(type),
		Object.keys(new type()).concat(
			Object.getOwnPropertyNames(type.prototype)
		).concat( props )
	);

///
/// \brief Adds an object and all its properties to SyntaxAssistant
///        for identification in the Script Editor
///
IdentifyObj = objName =>
{
	if (eval("typeof " + objName) != undefined)
		Warp.identify(objName, Object.getOwnPropertyNames(eval(objName)) );
};

///
/// \brief Adds all provided objects to SyntaxAssistant
///        for identification in the Script Editor
///
IdentifyMany = function()
{
	for (let i = 0; i < arguments.length; i++)
	{
		IdentifyObj(arguments[i]);
	}
};

///
/// \brief Assigns the code's result to the name and identifies it to the Script Editor.
///
Assign = (name, code) =>
{
	eval(`${name} = ${code}`);
	IdentifyObj(name);
};

///
/// \brief Assigns the string value to the name and identifies it to the Script Editor.
///
AssignStr = (name, value) =>
{
	eval(`${name} = "${value}"`);
	IdentifyObj(name);
};

  //=================//
 // Identifications //
//=================//

IdentifyMany(
	'IsNum', 'IsStr', 'IsBool', 'IsArr',
	'IsNumOrStr', 'IsWord', 'IsByte',
	'Filler', 'SwapFiller', 'SwapFillers',
	'SetFillTarget', 'SetFillTargets',
	'Wrap', 'BitWidth', 'Distance',
	'CaseAddr', 'ParseData', 'FindInstr',
	'Identify', 'IdentifyClass',
	'IdentifyObj', 'IdentifyMany',
	'Assign', 'AssignStr',

//from AllDebug
	"$$", "$$$", "$_", "$__", "Log",
	"Debug", "Info", "Dump", "NewLine",
	"ShowAddr", "ShowAddrs", "ShowArr",
	"ShowVar", "ShowC", "ResetC"
);
