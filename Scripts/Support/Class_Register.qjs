/**************************************************************************\
*                                                                          *
*   Copyright (C) 2020-2021 Neo-Mind                                       *
*                                                                          *
*   This file is a part of WARP project                                    *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author(s)     : Neo-Mind                                               *
*   Created Date  : 2020-10-30                                             *
*   Last Modified : 2021-04-04                                             *
*                                                                          *
\**************************************************************************/

///
/// \brief Convenience class for representing various CPU registers
///
if (typeof Register === 'undefined') //avoid redefinition
{
	Register = class
	{
		///
		/// \brief Constructor
		///
		constructor(name, bitwidth, index)
		{
			/// 1.1 - Assign register name
			this.Name = name;//just for debug purpose

			/// 1.2 - Assign the index
			this.Index = (typeof(index) === 'number' && index >= 0 && index <= 7) ? index : -1;

			/// 1.3 - Assign the bit width of the register
			this.Width = typeof(bitwidth) === 'number' ? bitwidth : 32; //taking 32 bit by default
		}

		///
		/// \brief Method to compare 'Register' objects
		///
		is(tgt)
		{
			return (
				(tgt instanceof Register)
				&& tgt.Index === this.Index
				&& tgt.Width === this.Width
			);
		}

		///
		/// \brief Method to check whether the 'Register' is intended to be a placeholder
		///
		isPlaceHolder()
		{
			return (this.Index === -1);
		}

		///
		/// \brief Method to check whether current 'Register' is one of EAX, AX or AL
		///
		isAcc()
		{
			return (this.Index === 0);
		}

		///
		/// \brief Method to write out the details of the register (used for debugging)
		///
		toString()
		{
			return `${this.Name} {${this.Width} bit Reg , index = ${this.Index}}`;
		}
	};

	IdentifyClass(Register);

	///
	/// \brief Temporary function to create register object & identify it. Returns the created object
	///
	const _createR_ = (name, bitsize, index) => {
		Assign(
			name,
			`new Register('${name}', ${bitsize}, ${index})`
		);
		return eval(name);
	};

	///
	/// \brief Defining the 32 bit register representations
	///

	_createR_('R32', 32); //Generic Placeholder

	R32.List = [
		'EAX', 'ECX', 'EDX', 'EBX',
		'ESP', 'EBP', 'ESI', 'EDI',
	].map((name, index) => _createR_(name, 32, index));


	///
	/// \brief Defining the 16 bit register representations
	///

	_createR_('R16', 16); //Generic Placeholder

	R16.List = [
		'AX', 'CX', 'DX', 'BX',
		'SP', 'BP', 'SI', 'DI',
	].map((name, index) => _createR_(name, 16, index));


	///
	/// \brief Defining the 8 bit register representations
	///

	_createR_('R8', 8); //Generic Placeholder

	R8.List = [
		'AL', 'CL', 'DL', 'BL', //since ESP, EBP, ESI & EDI dont have 8bit counterparts
		'AH', 'CH', 'DH', 'BH', //these indices are used for the higher 8bit parts of the above.
	].map((name, index) => _createR_(name, 8, index));


	///
	/// \brief Defining the FPU Register Stack & SSE Registers
	///
	let indices = [0, 1, 2, 3, 4, 6, 7];

	_createR_("ST$" ,  80); //Generic Placeholder
	_createR_("MM$" ,  64); //Generic Placeholder
	_createR_("XMM$", 128); //Generic Placeholder

	ST$.List  = indices.map( index => _createR_( 'ST' + index,  80, index) );
	MM$.List  = indices.map( index => _createR_( 'MM' + index,  64, index) );
	XMM$.List = indices.map( index => _createR_('XMM' + index, 128, index) );

	ST = i =>
		i >= 0 && i <= 7 ? eval("ST" + i) : null;

	IdentifyObj("ST");

	///
	/// \brief Tests whether given var contains a 'Register' object
	///
	IsReg = v =>
		v instanceof Register;

	IdentifyObj('IsReg');
}
