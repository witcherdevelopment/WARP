/**************************************************************************\
*                                                                          *
*   Copyright (C) 2020-2021 Neo-Mind                                       *
*                                                                          *
*   This file is a part of WARP project                                    *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author(s)     : Neo-Mind                                               *
*   Created Date  : 2020-10-30                                             *
*   Last Modified : 2021-04-04                                             *
*                                                                          *
\**************************************************************************/

///
/// \brief Convenience class for representing a CPU instruction
///
if (typeof Instr === 'undefined') //avoid redefinition
{
	Instr = class
	{
		///
		/// \brief Constructor
		///
		constructor(addr)
		{
			this.Addr     = addr; //The address where this instruction was picked from can be undefined/null too
			this.Prefixes = [];   //List of prefix bytes
			this.Codes    = [];   //List of opcode bytes. Length can be 1, 2 (0F ##) or 3 (0F 38 ## or 0F 3A ##)
			//this.MRM            //ModRM object - not defined right now
			//this.SIB            //SIBase object (Scale * Index + Byte)  - not defined right now

			//this.Disp           //Displacement value  - not defined right now
			this.BC_Disp  = 0;    //Byte count of Displacement value

			// this.Immd          //Immediate value  - not defined right now
			this.BC_Immd  = 0;    //Byte count of Immediate value

			//this.SegNum         //Segment number for FAR type instructions  - not defined right now
			//this.NestLvl        //Nesting Level used for ENTER instruction  - not defined right now

			this.Size     = -1;   //Total Size in bytes of this instruction
			this.NextAddr = -1;   //Address of the next instruction
		}

		///
		/// \brief Method to add prefix byte(s) to "Prefixes"
		///
		addPrefix(p)
		{
			/// 1 - If array is provided just assign it
			if (Array.isArray(p))
				this.Prefixes = p;

			/// 2 - Or if the provided value is an IPrefix object push its contents to existing array
			else if (p instanceof IPrefix)
				this.Prefixes.push(p.Value);

			/// 3 - Or if the provided value is a byte (number or hex string) then push it directly to existing array
			else if (IsByte(p, false))
				this.Prefixes.push(p);
		}

		///
		/// \brief Method to add opcode byte(s) to "Codes"
		///
		addOpCode(o)
		{
			/// 1 - If array is provided just assign it
			if (Array.isArray(o))
				this.Codes = o;

			/// 2 - Otherwise push to existing Codes array
			else if (o != undefined)
				this.Codes.push(o);
		}

		///
		/// \brief Method to check whether current 'Instr' expects a ModRM byte
		///
		needModRM()
		{
			return (OpCodeList.WithModRM.includes(this.Codes[0]) ||
				(this.Codes[1] != undefined && !OpCodeList.SecWithoutModRM.includes(this.Codes[1]))
			);
		}

		///
		/// \brief Method to check whether current 'Instr' has to reverse the direction of arguments (via a direction bit)
		///
		isReversed()
		{
			return (OpCodeList.Reverse.includes(this.Codes[0]) ||
				(this.Codes[1] != undefined && !OpCodeList.SecNonReverse.includes(this.Codes[1]))
			);
		}

		///
		/// \brief Method to check whether the prefixes contain Addr Override
		///
		hasAddrOvrd()
		{
			return this.Prefixes.includes(AD16.Value);
		}

		///
		/// \brief Method to check whether the prefixes contain Operand Override
		///
		hasOperOvrd()
		{
			return this.Prefixes.includes(OPCH.Value);
		}

		///
		/// \brief Method to auto calculate the size of immediate value expected based on Prefixes and Codes
		///
		calcImmSize()
		{
			/// 1 - Check the 1 byte imm lists
			if (OpCodeList.WithImm8.includes(this.Codes[0]) ||
				(this.Codes[1] != undefined && OpCodeList.SecWithImm8.includes(this.Codes[1])) ||
				(this.Codes[2] != undefined && OpCodeList.TerWithImm8.includes(this.Codes[2]))
			)
			{
				this.BC_Immd = 1;
			}
			/// 2 - Check the 4 byte imm lists
			else if (OpCodeList.WithImm32.includes(this.Codes[0]) ||
				(this.Codes[1] != undefined && OpCodeList.SecWithImm32.includes(this.Codes[1]))
			)
			{
				this.BC_Immd = (this.Prefixes.includes(OPCH.Value) ? 2 : 4);
			}
			/// 3 - Check the 2 byte imm lists
			else if (OpCodeList.WithImm16.includes(this.Codes[0])
			)
			{
				this.BC_Immd = 2;
			}
			/// 4 - Set to zero if no matches found
			else
			{
				this.BC_Immd = 0;//better to keep -1 but need to add extra checks then
			}
		}

		///
		/// \brief Calculate the Target Address for CALL and different forms of JMP instructions
		///
		calcTgtAddr()
		{
			if (this.BC_Disp > 0 && this.NextAddr > 0)
			{
				return Exe.Phy2Vir(this.NextAddr) + this.Disp;
			}
			else
			{
				return -1;
			}
		}

		///
		/// \brief 'Static' Method to extract all the instruction bytes at addr into an 'Instr' object
		///
		static FromAddr(addr, type, result)
		{
			/// 1.1 - Convert the address if VIRTUAL
			if (type === VIRTUAL)
				addr = Exe.Vir2Phy(addr, CODE); //has to be code section for instructions

			/// 1.2 - Prepare the result object
			if (result instanceof Instr) //need to reset the members
			{
				result.Addr = addr;
				result.Prefixes = [];
				result.Codes = [];
				delete result.MRM;
				delete result.SIB;

				delete result.Disp;
				result.BC_Disp = 0;

				delete result.Immd;
				result.BC_Immd  = 0;

				delete result.SegNum;
				delete result.NestLvl;

				result.Size     = -1;
				result.NextAddr = -1;
			}
			else
			{
				result = new this(addr);
			}

			/// 1.3 - For non-valid addresses return the blank object
			if (addr < 0 || addr > Exe.FileSize)
				return result;

			/// 1.4 - Extract the first byte
			let b = Exe.GetUint8(addr++);

			/// 1.5 - Iterate over valid Prefixes till we reach an opcode byte
			while (IPrefix.List.includes(b))
			{
				result.addPrefix(b);
				b = Exe.GetUint8(addr++);
			}

			/// 2.1 - Append the opcode
			result.addOpCode(b);

			/// 2.2 - Check for multibyte opcodes & append accordingly
			if (b === 0x0F)
			{
				b = Exe.GetUint8(addr++);
				result.addOpCode(b);

				if (b === 0x38 || b === 0x3A)
				{
					b = Exe.GetUint8(addr++);
					result.addOpCode(b);
				}
			}

			/// 3.1 - If the instruction expects a ModRM byte then extract it
			if (result.needModRM())
			{
				result.MRM = new ModRM(Exe.GetUint8(addr++));

				/// 3.2 - If the ModRM expects an accompanying SIB byte then extract it.
				if (result.MRM.needSIB())
					result.SIB = new SIBase(Exe.GetUint8(addr++));

				/// 3.3 - If the ModRM specifies a Displacement then extract it
				if (result.MRM.Mode === 1)
				{
					result.Disp = Exe.GetInt8(addr++);
					result.BC_Disp = 1;
				}
				else if ( result.MRM.Mode === 2 ||
						(result.MRM.Mode === 0 && result.MRM.RegM === EBP.Index) ||
						('SIB' in result && result.SIB.Base === EBP.Index)
				)
				{
					if (result.Prefixes.includes(AD16.Value)) //Address override
					{
						result.Disp = Exe.GetInt16(addr);//not using ++ since we need to increment by 2
						result.BC_Disp = 2;
					}
					else
					{
						result.Disp = Exe.GetInt32(addr);//not using ++ since we need to increment by 4
						result.BC_Disp = 4;
					}
					addr += result.BC_Disp;
				}
			}
			else if (OpCodeList.WithDisp32.includes(result.Codes[0]))
			{
				result.BC_Disp = 4;
				result.Disp = Exe.GetInt32(addr);
				addr += 4;
			}

			/// 3.4 - Calculate the size (byte count) of Immediate value expected if any
			result.calcImmSize();

			/// 3.5 - Based on the byte count, extract the immediate value
			switch (result.BC_Immd)
			{
				case 1:
					result.Immd = Exe.GetInt8(addr);
					break;

				case 2:
					result.Immd = Exe.GetInt16(addr);
					break;

				case 4:
					result.Immd = Exe.GetInt32(addr);
					break;
			}
			addr += result.BC_Immd;

			/// 4.1 - Extract the Nesting Level if expected
			if (result.Codes[0] === 0xC8)//ENTER instruction
			{
				result.NestLvl = Exe.GetInt8(addr++);
			}

			/// 4.2 - Otherwise Extract the Far type segment number if expected
			else if (OpCodeList.FarType.includes(result.Codes[0]))
			{
				result.SegNum = Exe.GetInt16(addr);
				addr += 2;
			}

			/// 4.3 - Calculate & assign the instruction Size in bytes as well as the address of the next instruction
			result.NextAddr = addr;
			result.Size = result.NextAddr - result.Addr;

			/// 4.4 - Return the created Instr
			return result;
		}

		///
		/// \brief 'Static' Method to generate an 'Instr' object using its components
		///
		static FromParts(data, codes, oper)
		{
			/// 1.1 - Create the 'Instr' object
			let result = new this(-1);

			/// 1.2 - Get the Operation Type
			let type = (data instanceof OpData) ? data.OpType : OpTypes.ERR;

			/// 1.3 - Ensure valid operation type and opcode(s) to proceed
			if (type === OpTypes.ERR || codes == undefined)
				return result;

			/// 1.4 - Assign all the prefixes
			data.Prefix.forEach( p => result.addPrefix(p) );

			/// 1.5 - Assign all the opcodes
			result.Codes = Wrap(codes);

			/// 1.6 - Calculate the byte count for immediate value if any
			result.calcImmSize();
			if (result.BC_Immd === 0 && data.ImSize > 0)
				result.BC_Immd = data.ImSize / 8;

			/// 1.7 - Save the immediate value
			result.Immd = data.Immd;

			/// 1.8 - Save the displacement if available along with its size in bytes
			if ('Disp' in data)
			{
				result.Disp = data.Disp;
				result.BC_Disp = data.DpSize / 8;
			}

			if (result.needModRM())
			{
				/// 2.1 - Calculate the Mod R M components.
				let mod, ro, rm;
				switch (type)
				{
					case OpTypes.R_R: //Reg, Reg <, imm>
						mod = 3;
						if (result.isReversed())
						{
							ro = data.TgtReg;
							rm = data.SrcReg;
						}
						else
						{
							ro = data.SrcReg;
							rm = data.TgtReg;
						}
						break;

					case OpTypes.R_P: //Reg, Mem Ptr <, imm>
					case OpTypes.A_D:
						ro = data.TgtReg;
						break;

					case OpTypes.P_R: //Mem Ptr, Reg <, imm>
					case OpTypes.D_A:
					case OpTypes.P  : //Mem Ptr <, imm>
						if (type === OpTypes.P)
						{
							ro = oper;
						}
						else
						{
							ro = data.SrcReg;
						}
						break;

					case OpTypes.R: //Reg <, imm>
					case OpTypes.A:
						mod = 3;
						ro = oper;
						rm = data.TgtReg;
						break;

					//Nothing to do for OpTypes.I
				}

				/// 2.2 - Check for ptr arguments on either target or source
				if ('Index' in data || 'Disp' in data) // only true for ptrs
				{
					/// 2.3 - Set mod & rm for [Displacement] ptrs
					if ('Index' in data === false )
					{
						mod = 0;
						rm = 5;
					}

					/// 2.4 - Set mod & rm for [Reg] & [Reg + Disp] ptrs
					else if (data.Scale === 1 && 'Base' in data === false )
					{
						/// 2.4.1 - Set the mod value based on Displacement size (0 if no disp present)
						mod = result.BC_Disp > 0 ? (result.BC_Disp === 1 ? 1 : 2) : 0;

						/// 2.4.2 - Save the register to rm
						rm = data.Index;

						/// 2.4.5 - Override rm for 16 bit addressing
						if (data.Index.Width === 16)
						{
							rm = rm.is(BX) ? 7
							   : rm.is(BP) ? 6
							   : rm.is(DI) ? 5
							   : rm.is(SI) ? 4
							               : rm ;
						}
					}

					/// 2.5 - Set mod & rm for remaining ptr patterns ([Reg + reg] and [scale*Reg + ...])
					else
					{
						/// 2.5.1 - Set rm to 4 by default
						rm = 4;

						/// 2.5.2 - Override rm for 16 bit addressing & undefine Base to avoid SIBase generation
						if (IsReg(data.Base))
						{
							if (data.Index.Width === 16)
							{
								rm = data.Index.is(BX) ? 0
								   : data.Index.is(BP) ? 2
								                       : rm;

								if (data.Base.is(DI))
									rm |= 1;

								delete data.Base;
							}
						}

						/// 2.5.3 - Set mod according to the displacement
						mod = (data.Base === 5 || result.BC_Disp <= 0) ? 0
							: result.BC_Disp == 1 ? 1
							: 2;
					}
				}

				/// 2.6 - Construct the ModRM object if mod is valid
				if (mod != undefined)
					result.MRM = new ModRM(mod, ro, rm);

				/// 2.7 - Construct the SIBase object if base is valid
				if ('Base' in data)
					result.SIB = new SIBase(data.Scale, data.Index, data.Base);
			}

			/// 3 - Return the created object
			return result;
		}

		///
		///\brief Method to extract the instruction from the next address into a new object (just a wrapper)
		///
		getNext(offset = 0)
		{
			return Instr.FromAddr(this.NextAddr + offset);
		}

		///
		///\brief Similar to above but updates the current object instead
		///
		moveToNext(offset = 0)
		{
			return Instr.FromAddr(this.NextAddr + offset, PHYSICAL, this);
		}

		///
		/// \brief toString override - Constructs the hex equivalent (i.e. ASM code) of the 'Instr'
		///
		toString()
		{
			/// 1.1 - Initialize the result string
			let result = "";
			let append = p => {result = result.appendAsHex(p, 1)};

			/// 1.2 - Add the prefixes
			this.Prefixes.forEach(append);

			/// 1.3 - Add the opcodes
			this.Codes.forEach(append);

			/// 2.1 - Add the ModRM byte
			if (this.MRM instanceof ModRM)
				append(this.MRM.Data);

			/// 2.2 - Add the SIBase byte
			if (this.SIB instanceof SIBase)
				append(this.SIB.Data);

			/// 2.3 - Add the displacement
			result =  result.appendAsHex(this.Disp, this.BC_Disp);

			/// 2.4 - Add the immediate value
			result =  result.appendAsHex(this.Immd, this.BC_Immd);

			/// 3.1 - Add the extra stuff (Segment & Nesting Level)
			result = result.appendAsHex(this.SegNum, 2);
			result = result.appendAsHex(this.NestLvl, 1);

			/// 3.2 - Return the string
			return result;
		}
	};

	IdentifyClass(Instr, [
		"Prefixes", "Codes", "MRM", "SIB",
		"Disp", "BC_Disp", "Immd", "BC_Immd",
		"SegNum", "NestLvl", "Size", "NextAddr"
	]);
}