/**************************************************************************\
*                                                                          *
*   Copyright (C) 2020-2021 Neo-Mind                                       *
*                                                                          *
*   This file is a part of WARP project (specific to RO clients)           *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author(s)     : Neo-Mind                                               *
*   Created Date  : 2020-11-06                                             *
*   Last Modified : 2021-04-04                                             *
*                                                                          *
\**************************************************************************/

if (typeof LANGTYPE === 'undefined') // avoid redefinition
{
	///
	/// \brief Hash describing the LangType details (only address as of now)
	///
	LANGTYPE = 
	{
		///
		/// \brief Initialize the data members
		///
		init : function()
		{
			this.Value   = -1;  //The g_serviceType VIRTUAL Address
			this.Hex     = '';  //It's hex in Little Endian form

			delete this.Valid;  //Will be true or false indicating extraction status
			delete this.Error;  //Error Object containing a message about the issue encountered during extraction if any

			IdentifyObj("LANGTYPE");
		},

		///
		/// \brief Extracts the new data from a loaded exe.
		///
		load : function()
		{
			let _ = "LANGTYPE.load : ";
			
			$$(_ + '1.1 - Check if load was already called')
			if ('Valid' in this)
			{
				$$(_ + '1.2 - If we got error previously then report it again')
				if (!this.Valid)
					throw this.Error;
			}

			$$(_ + '1.3 - Identify the remaining members to Syntax Assistant')
			Identify("LANGTYPE", ["Valid", "Error"]);

			$$(_ + '1.4 - Initialize \'Valid\' to false')
			this.Valid = false;

			$$(_ + '1.5 - Find the string "america"')
			let addr = Exe.FindText("america");
			if (addr < 0)
			{
				this.Error = new Error("LT - 'america' not found");
				throw this.Error;
			}

			$$(_ + '1.6 - Find where its used in a PUSH')
			addr = Exe.FindHex( PUSH(addr) );
			if (addr < 0)
			{
				this.Error = new Error("LT - 'america' not used");
				throw this.Error;
			}

			$$(_ + '1.7 - Find an assignment to g_serviceType after it')
			addr = Exe.FindHex( MOV([POS4WC], 1), addr + 5); //MOV DWORD PTR DS:[g_serviceType], 1
			if (addr < 0)
			{
				this.Error = new Error("LT - g_serviceType not assigned");
				throw this.Error;
			}

			$$(_ + '2.1 - Extract the address to \'Value\' & save its hex')
			this.Value = Exe.GetUint32(addr + 2);
			this.Hex = this.Value.toHex(4);

			$$(_ + '2.2 - Set validity to true')
			this.Valid = true;
		},

		///
		/// \brief toString override to output the hex value
		///
		toString : function()
		{
			return this.Hex;
		},
	};
}

///
/// \brief Initialize when Exe is loaded (only load the object in relevant patches)
///
LANGTYPE.init();
