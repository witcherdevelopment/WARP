/**************************************************************************\
*                                                                          *
*   Copyright (C) 2020-2021 Neo-Mind                                       *
*                                                                          *
*   This file is a part of WARP project (specific to RO clients)           *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author(s)     : Neo-Mind                                               *
*   Created Date  : 2020-11-16                                             *
*   Last Modified : 2021-04-04                                             *
*                                                                          *
\**************************************************************************/

if (typeof DGRF === 'undefined') //avoid redefinition
{
	///
	/// \brief Hash that stores info about Data.grf
	///
	DGRF =
	{	
		///
		/// \brief Initializes the data members
		///
		init : function()
		{
			this.Name    = '';  //'data.grf' or 'sdata.grf'
			this.Addr    = -1;  //The VIRTUAL address of name
			this.RefAddr = -1;  //The address where it is referenced
			this.MovFMgr = '';  //The MOV ECX, g_FileMgr code

			delete this.Valid;  //Will be true or false indicating extraction status
			delete this.Error;  //Error Object containing a message about the issue encountered during extraction if any

			IdentifyObj("DGRF");
		},

		///
		/// \brief Extracts the new data from a loaded exe.
		///
		load : function()
		{
			let _ = "DGRF.load : ";
			
			$$(_ + '1.1 - Check if load was already called')
			if ('Valid' in this)
			{
				/// 1.2 - If we got error previously then report it again')
				if (!this.Valid)
					throw this.Error;
			}

			$$(_ + '1.3 - Identify the remaining members to Syntax Assistant')
			Identify("DGRF", ["Valid", "Error"]);

			$$(_ + '1.4 - Initialize \'Valid\' to false')
			this.Valid = false;

			$$(_ + '1.5 - Find "data.grf" or "sdata.grf" for really old clients')
			this.Name = ROC.Post2010 ? "data.grf" : "sdata.grf"
			this.Addr = Exe.FindText(this.Name);
			if (this.Addr < 0)
			{
				this.Error = new Error("DG - 'data.grf' not found");
				throw this.Error;
			}

			$$(_ + '1.4 - Find where its used in a PUSH')
			let addr = -1;
			if (Exe.Version >= 14.0) //for VC14.16
			{
				let code =
					MOV(ECX, POS4WC)   	//MOV ECX, OFFSET g_fileMgr
				+	TEST(EAX, EAX)		//TEST EAX, EAX
				+	SETNE([POS4WC])		//SETNE BYTE PTR DS:[addr]
				+	PUSH(this.Addr)		//PUSH OFFSET addr1; "data.grf"
				;

				addr = Exe.FindHex(code);
				if (addr > 0)
				{
					$$(_ + '2.1 - Save the Reference address (where the PUSH occurs in VC14.16) & extract the g_FileMgr MOV before it')
					this.RefAddr = addr + code.byteCount() - 5;
					this.MovFMgr = Exe.GetHex(addr, 5);
				}
			}
			if (addr < 0) //for VC6-VC11 or when the above match failed
			{
				let code =
					PUSH(this.Addr)		//PUSH OFFSET addr1; "data.grf"
				+	MOV(ECX, POS4WC)	//MOV ECX, OFFSET g_fileMgr
				;

				addr = Exe.FindHex(code);
				if (addr < 0)
				{
					this.Error = new Error("DG - 'data.grf' not used");
					throw this.Error;
				}

				$$(_ + '2.2 - Save the Reference address (where the PUSH occurs in older clients) & extract the g_FileMgr MOV after it')
				this.RefAddr = addr;
				this.MovFMgr = Exe.GetHex(addr + 5, 5);
			}

			$$(_ + '2.3 - Set validity to true')
			this.Valid = true;
		},
	};
}

///
/// \brief Initialize when Exe is loaded (only load the object in relevant patches)
///
DGRF.init();
