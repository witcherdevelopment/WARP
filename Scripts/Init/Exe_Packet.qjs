/**************************************************************************\
*                                                                          *
*   Copyright (C) 2020-2021 Neo-Mind                                       *
*                                                                          *
*   This file is a part of WARP project (specific to RO clients)           *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author(s)     : Neo-Mind                                               *
*   Created Date  : 2020-11-06                                             *
*   Last Modified : 2021-04-04                                             *
*                                                                          *
\**************************************************************************/

if (typeof PACKET === 'undefined') // avoid redefinition
{
	///
	/// \brief Values denoting how the KeySetter function is called
	///
	KeyMode = {
		Push: 0,    //Keys pushed as argument
		Move: 1,    //Direct assignment inside Function
		Shared: 2,  //Extension of the above but with a shared key
		Virtual: 3, //Virtualized function (need to use an explicit mapping instead) OR
		            //The function is only assigning 0s now
		Unknown: 4  //Self Explanatory
	};
	IdentifyObj("KeyMode");

	///
	/// \brief Hash describing the Packet Encryption details
	///
	PACKET =
	{
		///
		/// \brief Initialize the data members
		///
		init : function()
		{
			this.KeySetter = -1;       //The VIRTUAL address of the function which sets the keys and/or does the obfuscation

			this.KS_Mode   = KeyMode.Unknown; //The mode of the function above

			this.MovECX    = "";       //The code for MOV ECX, DWORD PTR DS:[KeyAddr]
			this.Keys      = [0,0,0];  //The set of Packet Keys that were extracted/mapped out

			this.RefAddr   = -1;       //Reference Location from where we started
			this.Assigner  = -1;       //Location where the keys are assigned inside ObfuscateOrInit function
			this.PatchData = [];       //Data saved by packet key patches

			delete this.Valid;         //Will be true or false indicating extraction status
			delete this.Error;         //Error Object containing a message about the issue encountered during extraction if any

			IdentifyObj("PACKET");
		},

		///
		/// \brief Extracts the new data from a loaded exe.
		///
		load : function()
		{
			let _ = "PACKET.load : ";

			$$(_ + '1.1 - Check if load was already called')
			if ('Valid' in this)
			{
				$$(_ + '1.2 - If we got error previously then report it again.')
				if (!this.Valid)
					throw this.Error;
			}

			$$(_ + '1.3 - Identify the remaining members to Syntax Assistant')
			Identify("PACKET", ["Valid", "Error"]);

			$$(_ + '1.4 - Initialize \'Valid\' to false && the \'KS_Mode\' to KeyMode.Unknown')
			this.Valid = false;
			this.KS_Mode = KeyMode.Unknown;

			$$(_ + '1.5 - Ensure the Build date is within valid values')
			if (!ROC.HasPktKeys)
			{
				this.Error = new Error("PKT - Unsupported build date");
				throw this.Error;
			}

			$$(_ + '1.6 - Find where the string \'PACKET_CZ_ENTER\' is PUSHed')
			let addr = Exe.FindText("PACKET_CZ_ENTER");
			if (addr > 0)
			{
				addr = Exe.FindHex( PUSH(addr) );
			}

			if (addr < 0)
			{
				$$(_ + '1.7 - If not found then look for the CALL, MOV, CALL pattern')
				let inb4 =
					CALL(ALLWC)   //CALL func1
				+	MOV(ECX, EAX) //MOV ECX, EAX
				+	CALL(ALLWC)   //CALL func2
				;

				let code =
					inb4          //CALL CRagConnection::instanceR
					              //MOV ECX, EAX
					              //CALL CRagConnection::GetPacketSize
				+	PUSH_EAX      //PUSH EAX
				+	inb4          //CALL CRagConnection::instanceR
					              //MOV ECX, EAX
					              //CALL CRagConnection::SendPacket
				+	PUSH_1        //PUSH 1
				+	inb4          //CALL CRagConnection::instanceR
					              //MOV ECX, EAX
					              //CALL CConnection::SetBlock
				+	PUSH(6)       //PUSH 6
				;
				addr = Exe.FindHex(code);
			}

			if (addr < 0 && Exe.BuildDate > 20200800)
			{
				$$(_ + '1.8 - In more recent clients the GetPacketSize & SendPacket sequences are not present,')
				$$(_ + '      so we look for the RegSetValueExA CALL for CASH_CATEGORY as reference.')

				let ccAddr = Exe.FindText("CASH_CATEGORY");
				if (ccAddr > 0)
				{
					let code =
						PUSH(4)      //PUSH 4 ; Type = REG_DWORD
					+	PUSH_0       //PUSH 0 ; Reserved = 0
					+	PUSH(ccAddr) //PUSH OFFSET addr; SubKey = "CASH_CATEGORY"
					;
					addr = Exe.FindHex(code);
				}
			}

			if (addr < 0)
			{
				this.Error = new Error("PKT - reference location not found");
				throw this.Error;
			}

			$$(_ + '1.8 - Save the address')
			this.RefAddr = addr;

			$$(_ + '2.1 - Look for 3 PUSHes followed by a CALL (keys are PUSHed to function)')
			let code =
				MOV(ECX, [POS3WC]) //MOV ECX, DWORD PTR DS:[KeyAddr]
			+	PUSH(ALLWC)        //PUSH key3
			+	PUSH(ALLWC)        //PUSH key2
			+	PUSH(ALLWC)        //PUSH key1
			+	CALL()             //CALL KeySetter
			;
			let callAddr = Exe.FindHex(code, addr - 0x100, addr);
			if (callAddr > 0)
			{
				$$(_ + '2.2 - If found then set the KS_Mode and extract the MOV statement')

				this.KS_Mode = KeyMode.Push;
				this.MovECX = Exe.GetHex(callAddr, 6);

				$$(_ + '2.3 - Extract the KeySetter address and the keys themselves')

				callAddr += code.byteCount();
				this.KeySetter = Exe.GetTgtAddr(callAddr);
				this.Keys[0] = Exe.GetInt32(callAddr -  5);
				this.Keys[1] = Exe.GetInt32(callAddr - 10);
				this.Keys[2] = Exe.GetInt32(callAddr - 15);

				$$(_ + '2.4 - Set validity to true')
				this.Valid = true;
				return;
			}

			$$(_ + '3.1 - Look for PUSH 1, CALL pattern next (keys get assigned inside the function)')
			code =
				MOV(ECX, [POS4WC]) //MOV ECX, DWORD PTR DS:[KeyAddr]
			+	PUSH_1             //PUSH 1
			+	CALL()             //CALL CRagConnection::ObfuscateOrInit
			;
			callAddr = Exe.FindHex(code, addr - 0x100, addr);
			if (callAddr < 0)
			{
				this.Error = new Error("PKT - ObfuscateOrInit CALL not found");
				throw this.Error;
			}

			$$(_ + '3.2 - Extract the MOV statement')
			this.MovECX = Exe.GetHex(callAddr, 6);

			$$(_ + '3.3 - Extract the CALLed function address which is the \'KeySetter\'')
			callAddr += code.byteCount();
			this.KeySetter = Exe.GetTgtAddr(callAddr);

			$$(_ + '3.4 - Go inside the function')
			let fnAddr = Exe.Vir2Phy(this.KeySetter);

			$$(_ + '3.5 - Prep the common prefix for searching')
			let prefix =
				CMP(EAX, 1) //CMP EAX, 1
			+	JNE(WCp)    //JNE SHORT addr
			;

			$$(_ + '4.1 - First look for the individual key assignment pattern')
			code =
				prefix
			+	MOV([ECX, WCp], ALLWC)   //MOV DWORD PTR DS:[ECX+x], <Key A> ;the keys could be assigned in any order
			+	MOV([ECX, WCp], ALLWC)   //MOV DWORD PTR DS:[ECX+y], <Key B>
			+	MOV([ECX, WCp], ALLWC)   //MOV DWORD PTR DS:[ECX+z], <Key C>
			;

			addr = Exe.FindHex(code, fnAddr, fnAddr + 0x60);
			if (addr > 0)
			{
				$$(_ + '4.2 - If found then set the mode to \'Move\' and save the location of the first MOV as the Assigner')
				this.Assigner = addr + prefix.byteCount();
				this.KS_Mode = KeyMode.Move;

				$$(_ + '4.3 - Extract the keys being assigned')
				addr = this.Assigner;
				for (let i = 0; i < 3; i++)
				{
					let ins = Instr.FromAddr(addr);
					this.Keys[ins.Disp/4 - 1] = ins.Immd; //order can be any so this mechanism is needed
					addr = ins.NextAddr;
				}

				$$(_ + '4.4 - Set validity to true.')
				this.Valid = true;
				return;
			}

			$$(_ + '5.1 - Next look for the shared key pattern')
			code =
				prefix
			+	MOV(EAX, ALLWC)        //MOV EAX, <Key A> ; shared key
			+	MOV([ECX, WCp], EAX)   //MOV DWORD PTR DS:[ECX+x], EAX
			+	MOV([ECX, WCp], EAX)   //MOV DWORD PTR DS:[ECX+y], EAX
			+	MOV([ECX, WCp], ALLWC) //MOV DWORD PTR DS:[ECX+z], <Key B>
			;

			addr = Exe.FindHex(code, fnAddr, fnAddr + 0x60);
			if (addr > 0)
			{
				$$(_ + '5.2 - If found then set the mode to \'Shared\' and save the location of the first MOV as the Assigner')
				this.Assigner = addr + prefix.byteCount();
				this.KS_Mode = KeyMode.Shared;

				$$(_ + '5.3 - Extract the shared key first')
				let ins = Instr.FromAddr(this.Assigner);
				let sharedKey = ins.Immd;

				$$(_ + '5.4 - Extract all the keys (little more tricky since there is a MOV EAX)')
				for (let i = 0; i < 3; i++)
				{
					ins = Instr.FromAddr(ins.NextAddr);
					this.Keys[ins.Disp/4 - 1] = (i < 2) ? sharedKey : ins.Immd;
				}

				$$(_ + '5.5 - Set validity to true.')
				this.Valid = true;
				return;
			}

			$$(_ + '6.1 - Since neither pattern matched we need to use explicit mapping')
			this.KS_Mode = KeyMode.Virtual;

			$$(_ + '6.2 - For older clients we will try to look in the PktKeyMap')
			if (Exe.BuildDate <= 20180308)
			{
				if (typeof PktKeyMap === 'undefined' || !PktKeyMap) //avoid redefinition & only load when required
				{
					PktKeyMap = Warp.LoadYaml("Inputs/PacketKeyMap.yml");
					if (!PktKeyMap)
						throw Error("PKT - Packet Key Map file is invalid");
				}

				$$(_ + '6.3 - Retrieve the keys based on the date')
				let arr = PktKeyMap[Exe.BuildDate];

				$$(_ + '6.4 - Ensure we have a valid array')
				this.Valid = IsArr(arr) && arr.length === 3;
				if (this.Valid)
				{
					this.Keys = arr;
					return;
				}
				else
				{
					this.Error = new Error("PKT - No patterns or mappings matched");
					throw this.Error;
				}
			}

			$$(_ + '6.5 - For newer clients, the keys are 0 by default.')
			this.Valid = true;
		},
	};
}

///
/// \brief Initialize when Exe is loaded (only load the object in relevant patches)
///
PACKET.init();
