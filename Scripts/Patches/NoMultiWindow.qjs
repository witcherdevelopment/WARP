/**************************************************************************\
*                                                                          *
*   Copyright (C) ?-2015 Shinryo, Ai4rei/AN                                *
*                                                                          *
*   This file is a part of WARP project (specific to RO clients)           *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author(s)     : Shinryo, Ai4rei/AN                                     *
*   Created Date  : 2020-11-11                                             *
*   Last Modified : 2021-03-02                                             *
*                                                                          *
\**************************************************************************/

///
/// \brief Check for Existing Multiple Window Checker and enforce Disabling.
///        If not present, inserts custom code to do the check + disable
///
NoMultiWindow = function()
{
	/// 1.1 - Find CoInitialize function address
	let CoInit = Exe.FindFunc("CoInitialize", "ole32.dll");
	if (CoInit < 0)
		throw Error("CoInitialize not found");

	/// 1.2 - Find where it is CALLed from
	let prefix = PUSH_R;         //PUSH reg32
	let suffix = CALL([CoInit]); //CALL DWORD PTR DS:[<&ole32.CoInitialize>]

	let addr = Exe.FindHex(prefix + suffix);

	if (addr < 0) //almost all version use PUSH 0 for some dates, hence cant restrict based on version
	{
		prefix = PUSH_0; //Change PUSH reg32 to PUSH 0
		addr = Exe.FindHex(prefix + suffix);
	}
	if (addr < 0)
		throw Error("CoInitialize not CALLed");

	/// 1.3 - Point addr to location of the CALL
	let jmpAddr = addr + prefix.byteCount();

	/// 1.4 - Find CreateMutexA CALL after the CoInitialize CALL
	addr = Exe.FindFunc("CreateMutexA", "KERNEL32.dll");
	if (addr > 0)
	{
		/// 1.5 - If present then check if its used (then we dont need to add our own code)
		addr = Exe.FindHex( CALL([addr]), jmpAddr, jmpAddr + 0xD0 );

		if (addr > 0)
		{
			/// 1.6 - If the code after the CALL is MOV EAX , [] change it to assign FFFFFF instead
			if (Exe.Version < 10 && Exe.GetUint8(jmpAddr + 6) === 0xA1)
			{
				Exe.SetHex(jmpAddr + 6, MOV(EAX, 0xFFFFFF))
				return true;
			}
			else
			{
				Cancel("Already disabled");
			}
		}
	}

	/// 2.1 - Get the essential addresses for our function
	if (ROC.GetModHandle < 0)
		throw Error("GetModuleHandleA not found");

	if (ROC.GetProcAddr < 0)
		throw Error("GetProcAddress not found");

	let WaitSingle = Exe.FindFunc("WaitForSingleObject", "KERNEL32.dll");
	if (WaitSingle < 0)
		throw Error("WaitForSingleObject not found");

	if (ROC.Kernel32 < 0)
		throw Error("'KERNEL32.dll' not found");

	/// 2.2 - Prepare our function for mutex windows
	code =
		CALL([CoInit])                 //CALL DWORD PTR DS:[&ole32.CoInitialize>] ; args are already pushed
	+	PUSH(ESI)                      //PUSH ESI
	+	XOR(ESI, ESI)                  //XOR ESI, ESI
	+	PUSH(ROC.Kernel32)             //PUSH addr ; "KERNEL32.dll"
	+	CALL([ROC.GetModHandle])       //CALL DWORD PTR DS:[<&KERNEL32.GetModuleHandleA>]
	+	CALL(0x0D)                     //PUSH &JMP
	+	"CreateMutexA\x00".toHex()     //DB "CreateMutexA", 0
	+	PUSH_EAX                       //PUSH EAX
	+	CALL([ROC.GetProcAddr])        //CALL DWORD PTR DS:[<&KERNEL32.GetProcAddress>]
	+	CALL(0x0F)                     //PUSH &JMP
	+	"Global\\Surface\x00".toHex()  //DB "Global\Surface",0
	+	PUSH(ESI)                      //PUSH ESI
	+	PUSH(ESI)                      //PUSH ESI
	+	CALL(EAX)                      //CALL EAX
	+	TEST(EAX, EAX)                 //TEST EAX,EAX
	+	JE(0xF)                        //JE SHORT addr1 -> ExitProcess call below
	+	PUSH(ESI)                      //PUSH ESI
	+	PUSH_EAX                       //PUSH EAX
	+	CALL([WaitSingle])             //CALL DWORD PTR DS:[<&KERNEL32.WaitForSingleObject>]
	+	CMP(EAX, 258)                  //CMP EAX, 258 (0x102)   ; WAIT_TIMEOUT
	+	JNZ(0x26)                      //JNZ SHORT addr2 -> POP ESI below
	+	PUSH(ROC.Kernel32)             //PUSH addr ; "KERNEL32.dll"
	+	CALL([ROC.GetModHandle])       //CALL DWORD PTR DS:[<&KERNEL32.GetModuleHandleA>]
	+	CALL(0x0C)                     //PUSH &JMP
	+	"ExitProcess\x00".toHex()      //DB "ExitProcess", 0
	+	PUSH_EAX                       //PUSH EAX
	+	CALL([ROC.GetProcAddr])        //CALL DWORD PTR DS:[<&KERNEL32.GetProcAddress>]
	+	PUSH(ESI)                      //PUSH ESI
	+	CALL(EAX)                      //CALL EAX
	+	POP(ESI)                       //POP ESI ; addr2
	+	JMP(Filler(1))                 //JMP addr3 (jmpAddr + 6)
	;

	/// 2.3 - Allocate space to add our function
	let free = Exe.FindSpace(code.byteCount(), 0x10);
	if (free < 0)
		throw NO_ALLOC;

	let freeVir = Exe.Phy2Vir(free, DIFF);

	/// 2.4 - Fill in the blanks
	code = SetFillTarget(code, 1, Exe.Phy2Vir(jmpAddr + 6, CODE), freeVir, 1);

	/// 2.5 - Add function at the allocated space
	Exe.AddHex(free, code);

	/// 2.6 - Create JMP + 1 NOP to the function at jmpAddr
	Exe.SetJMP(jmpAddr, freeVir, 1);

	return true;
};
