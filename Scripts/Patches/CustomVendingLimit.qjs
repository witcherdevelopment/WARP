/**************************************************************************\
*                                                                          *
*   Copyright (C) 2014-2021 Neo-Mind                                       *
*                                                                          *
*   This file is a part of WARP project (specific to RO clients)           *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author(s)     : Neo-Mind                                               *
*   Created Date  : 2020-11-12                                             *
*   Last Modified : 2021-06-03                                             *
*                                                                          *
\**************************************************************************/

///
/// \brief Modify the constant used in Comparison inside the vending related function (dont have name for it atm)
///
CustomVendingLimit = function()
{
	/// 1.1 - Find where 1,000,000,000 is PUSHed
	if (typeof CVL_Vir === 'undefined')
		CVL_Vir = Exe.Phy2Vir(CVL_Phy);

	let addr = Exe.FindHex( PUSH(CVL_Vir) );
	if (addr < 0)
		throw Error("'1,000,000,000' not PUSHed");

	/// 1.2 - Find the comparison with 1Billion or 1Billion+1 before the PUSH
	let newStyle = Exe.BuildDate > 20130618;
	let limiter = (1e9 + (newStyle ? 0 : 1)).toHex(); //1B or 1B+1 in hex
	let code =
		limiter  //CMP reg32_A, 3B9ACA00 or 3B9ACA01 ; easier to do without opcode since it changes when reg32_A is EAX
	+	(newStyle
	?
		JLE(WCp) //JLE SHORT addr
	:            // or
		JL(WCp)  //JL SHORT addr
	);

	addr = Exe.FindHex(code, addr - 0x10, addr);
	if (addr < 0)
		throw Error("First Comparison not found");

	/// 1.3 - Add to comparison address set
	let limitAddrs = [addr];

	/// 1.4 - Find the MsgString CALL that gets the 0 zeny message
	code =
		PUSH_1       //PUSH 1
	+	PUSH_2       //PUSH 2
	+	PUSH(0x25C)  //PUSH 25C ; Line no. 605
	;
	addr = Exe.FindHex(code);
	if (addr < 0)
		throw Error("MsgBox CALL not found");

	/// 1.5 - Find the 2nd 1B or 1B+1 comparison before the PUSHes
	code =
		limiter  //CMP reg32_A, 3B9ACA00 or 3B9ACA01 ; easier to do without opcode since it changes when reg32_A is EAX
	+	(newStyle
	?
		JLE(WCp) //JLE SHORT addr
	:            // or
		JGE(WCp) //JGE SHORT addr
	);

	let addr2 = Exe.FindHex(code, addr - 0x80, addr);
	if (addr2 < 0 && newStyle)
	{
		code = code.replace(JLE(WCp), JBE(WCp));//Recent clients use JBE instead of JLE
		addr2 = Exe.FindHex(code, addr - 0x80, addr);
	}
	if (addr2 < 0)
		throw Error("Second Comparison not found");

	/// 1.6 - Add to comparison address set
	limitAddrs.push(addr2);

	if (newStyle)
	{
		/// 1.7 - For new style look for the additional comparisons (can range from 0 to 3)
		let code1 = CMP(R32, limiter);
		let code1a = CMP(EAX, limiter);

		let code2 =
			PUSH_1      //PUSH 1
		+	PUSH_2      //PUSH 2
		+	PUSH(0x9A3) //PUSH 9A3 ; Line no. 2468
		;

		let code3 = MOV(R32, limiter);

		let addrs = Exe.FindHexN(code2);
		addrs.forEach( memAddr =>
		{
			let addr = Exe.FindLastHex(code1, memAddr - 9, memAddr - 0x20);
			let offset = 2;
			if (addr < 0)
			{
				addr = Exe.FindLastHex(code1a, memAddr - 9, memAddr - 0x20);
				offset = 1;
			}
			if (addr > 0)
			{
				limitAddrs.push(addr + offset);

				addr = Exe.FindHex(code3, memAddr, memAddr + 0x70);
				if (addr < 0)
					throw Error("Unable to find the limit assignment");

				limitAddrs.push(addr + 1);
			}
		});
	}
	else
	{
		/// 1.8 - Find the 3rd extra comparison for oldstyle clients
		code = code.replace(JGE(WCp), JNE(WCp));//JNE instead of JGE
		addr = Exe.FindHex(code, addr - 0x60, addr);
		if (addr < 0)
			throw Error("Extra Comparison not found");

		/// 1.9 - Change the JNE to JMP
		Exe.SetJMP(addr + 4);
	}

	/// 2.1 - Get the new limit value from user
	let newLimit = Exe.GetUserInput('$vendingLimit', D_Int32, "Vending Limit", "Enter the new limit", 1e9, {min: 0});
	if (newLimit === false)
		Cancel("Vending Limit", 1e9);

	/// 2.2 - Prepare string with commas for the newLimit similar to the original 1B string
	let str = newLimit.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',') + '\0'; //Adding Commas every 3 digits like the original

	/// 2.3 - Change the 1B string
	Exe.SetText(CVL_Phy, str);

	/// 2.4 - For the old style increment the replaced value (original was also 1B+1)
	if (!newStyle)
		newLimit++;

	/// 2.5 - Replace the limit at all the comparison locations
	limitAddrs.forEach(addr => Exe.SetInt32(addr, newLimit));

	return true;
};

///
/// \brief Disable for Old Clients - Only 2013+ Clients have this check
///
CustomVendingLimit.validate = function()
{
	CVL_Phy = Exe.FindText("1,000,000,000", PHYSICAL);
	delete CVL_Vir;

    return (CVL_Phy > 0);
};
