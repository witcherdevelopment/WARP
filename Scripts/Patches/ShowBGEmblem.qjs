/**************************************************************************\
*                                                                          *
*   Copyright (C) 2014-2021 Neo-Mind                                       *
*                                                                          *
*   This file is a part of WARP project (specific to RO clients)           *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author(s)     : Neo-Mind                                               *
*   Created Date  : 2020-11-11                                             *
*   Last Modified : 2021-05-15                                             *
*                                                                          *
\**************************************************************************/

///
/// \brief Modify the Siege mode & BG mode check Jumps to Display Emblem when either is ON
///
ShowBGEmblem = function()
{
	/// 1.1 - Find the Mode checker pattern used in the emblem display function.
	let plus110 = Exe.Version < 11  //(reg32_A is usually ESI)
	?
		ADD(R32, 0x110)               //ADD reg32_A, 110 ; for VC9-VC10
	:                                 //  or
		LEA(EAX, [R32, 0x110])        //LEA EAX, [reg32_A + 110] ; for VC11 to VC14.16
	;

	let addrs = [
		...Exe.FindHexN(PUSH_1 + plus110),
		...Exe.FindHexN(plus110 + PUSH_1)
	];
	if (addrs.isEmpty())
		throw Error("Reference pattern missing");

	let code =
		MOV(ECX, POS4WC)  //MOV ECX, OFFSET g_session
	+	CALL(POS3WC)      //CALL CSession::IsSiegeMode
	+	TEST(EAX, EAX)    //TEST EAX, EAX
	+	JZ(WCp)           //JZ SHORT addr
	;

	let matchAddr;
	addrs.find(memAddr =>
	{
		matchAddr = Exe.FindHex(code, memAddr - 0x30, memAddr);
		return matchAddr > 0;
	});
	if (matchAddr < 0)
		throw Error("Mode checker not found");

	/// 1.2 - Save the address to be hookAddrs
	let hookAddrs = [matchAddr + 6];

	/// 1.3 - Skip the 2nd CALL if present (same pattern as before except there is a JNZ at end)
	let csize = code.byteCount();
	if (Exe.GetUint8(matchAddr + csize) === 0xB9)
		Exe.SetNOPs(matchAddr + csize, csize);

	/// 1.4 - Save the values needed to find the 2nd pattern
	let movSession = Exe.GetHex(matchAddr, 5);
	let IsSiegeMode = Exe.GetTgtAddr(matchAddr + 6);

	/// 1.5 - Extract the needed stuff from inside the function (always has the same form)
	let addr = Exe.Vir2Phy(IsSiegeMode, CODE);
	let movModeMgr = Exe.GetHex(addr, 5);       //MOV ECX, OFFSET g_modeMgr
	let GetGameMode = Exe.GetTgtAddr(addr + 6); //CALL CModeMgr::GetGameMode

	let ins = Instr.FromAddr(addr + 10);
	let mapOffset = ins.Disp;

	ins.moveToNext();
	let gvgPos = ins.Disp;
	let bgPos = gvgPos + 4;

	if (Exe.BuildDate < 20121010)
	{
		/// 2.1 - Find the second pattern
		code =
			movSession      //MOV ECX, OFFSET g_session
		+	CALL(ALLWC)     //CALL CSession::IsSiegeMode
		+	TEST(EAX, EAX)  //TEST EAX, EAX
		;

		addrs = Exe.FindHexN(JMP(WCp) + code + JE(WCp)).filter(memAddr => Exe.GetTgtAddr(memAddr + 8) === IsSiegeMode);
		if (addrs.isEmpty())
			addrs = Exe.FindHexN(JZ(WCp) + code + JE(WCp)).filter(memAddr => Exe.GetTgtAddr(memAddr + 8) === IsSiegeMode);

		if (addrs.isEmpty())
			throw Error("2nd pattern missing");

		/// 2.2 - Add the last entry to the hookAddrs
		let memAddr = addrs.last();
		if (hookAddrs.indexOf(memAddr + 8) < 0)
		{
			hookAddrs.push(memAddr + 8);

			/// 2.3 - Look for the additional comparison before the current one within the same function.. ugh!
			let	addr = Exe.FindLastHex(code + JE(POS2WC), memAddr - 0x80, memAddr - 0x180);
			if (addr > 0)
				hookAddrs.push(addr + 6);

			else if (Exe.Version < 9)
				throw Error("Additional pattern missing");
		}

		/// 2.4 - Find the 3rd pattern for VC9 (to fix the stagnant icon issue)
		if (Exe.Version === 9)
		{
			code =
				movSession      //MOV ECX, OFFSET g_session
			+	CALL(ALLWC)     //CALL CSession::IsSiegeMode
			+	POP_R           //POP reg32_A
			+	TEST(EAX, EAX)  //TEST EAX, EAX
			+	JZ(WCp)         //JZ SHORT addr
			;

			addrs = Exe.FindHexN(code).filter(memAddr => Exe.GetTgtAddr(memAddr + 6) === IsSiegeMode);
			if (addrs.length !== 1)
				throw Error("3rd pattern missing or too many matches");

			hookAddrs.push(addrs[0] + 6);
		}
	}

	/// 3.1 - Prep the new code
	code =
		movModeMgr                  //MOV ECX, OFFSET g_modeMgr
	+	CALL(Filler(1))             //CALL CModeMgr::GetGameMode
	+	MOV(ECX, [EAX, mapOffset])  //MOV ECX, DWORD PTR DS:[EAX + mapOffset]
	+	MOV(EAX, [ECX, gvgPos])     //MOV EAX, DWORD PTR DS:[ECX + gvgPos]
	+	TEST(EAX, EAX)              //TEST EAX, EAX
	+	JNZ(bgPos > 0x7F ? 6 : 3)   //JNZ SHORT _skip
	+	MOV(EAX, [ECX, bgPos])      //MOV EAX, DWORD PTR DS:[ECX + bgPos]
	+	RETN()                      //RETN ; _skip
	;

	/// 3.2 - Allocate space to add it
	let free = Exe.FindSpace(code.byteCount(), 0x10);
	if (free < 0)
		throw NO_ALLOC;

	let freeVir = Exe.Phy2Vir(free, DIFF);

	/// 3.3 - Fill in the blanks
	code = SetFillTarget(code, 1, GetGameMode, freeVir, 1);

	/// 3.4 - Add at allocated space
	Exe.AddHex(free, code);

	/// 3.5 - Change the targets of all hookAddrs
	hookAddrs.forEach( addr =>
		Exe.SetTgtAddr(addr, freeVir)
	);

	return true;
};
