/**************************************************************************\
*                                                                          *
*   Copyright (C) 2019-2021 CH.C (jchcc)                                   *
*                                                                          *
*   This file is a part of WARP project (specific to RO clients)           *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author(s)     : CH.C (jchcc)                                           *
*   Created Date  : 2020-11-12                                             *
*   Last Modified : 2021-03-02                                             *
*                                                                          *
\**************************************************************************/

///
/// \brief Make the client use StrStrIA instead of _mbsstr to enable case-insensitive search in storage
///
InsensitiveStorageSearch = function()
{
	/// 1.1 - Ensure the required functions are available
	if (ROC.GetModHandle < 0)
		throw Error("GetModuleHandleA not found");

	if (ROC.GetProcAddr < 0)
		throw Error("GetProcAddress not found");

	/// 1.2 - Find string search for storage
	let prefix =
		PUSH(ECX)               //PUSH ECX
	+	(Exe.Version > 11
	?
		CMOVNB(EAX, [EBP, WCn]) //CMOVNB EAX, DWORD PTR SS:[EBP - x]
	:
		''
	)
	+	PUSH_EAX                //PUSH EAX
	;

	let suffix =
		CALL([POS4WC])   //CALL DWORD PTR DS:[_mbsstr]
	+	ADD(ESP, 8)      //ADD ESP,8
	+	TEST(EAX, EAX)   //TEST EAX,EAX
	+	JE(4)            //JE SHORT addr1
	+	MOV(ESI, [ESI])  //MOV ESI, DWORD PTR DS:[ESI]
	+	JMP(WCp)         //JMP SHORT addr2
	;

	let addr = Exe.FindHex(prefix + suffix);
	if (addr < 0)
		throw Error("String search not found");

	/// 1.3 - Extract the CALL & Stack restore afterwards i.e. ADD ESP,8
	let callOffset = prefix.byteCount();
	let callNrestore = Exe.GetHex(addr + callOffset, 9);

	/// 1.4 - Save the VIRTUAL address after the stack restore
	let retnAddr = Exe.Phy2Vir(addr + callOffset + 9);

	/// 2.1 - Prepare our code
	let code =
		CMP([Filler(1)], 0)       //CMP DWORD PTR DS:[StrStrIA], 0
	+	JNE(0x2F)                 //JNE SHORT addr2
	+	PUSH(Filler(2))           //PUSH OFFSET ; ASCII "Shlwapi.dll"
	+	CALL([ROC.GetModHandle])  //CALL DWORD PTR DS:[GetModuleHandleA]
	+	PUSH(Filler(3))           //PUSH OFFSET ; ASCII "StrStrIA"
	+	PUSH_EAX                  //PUSH EAX
	+	CALL([ROC.GetProcAddr])   //CALL DWORD PTR DS:[GetProcAddress]
	+	TEST(EAX, EAX)            //TEST EAX, EAX
	+	JNE(0xF)                  //JNE SHORT addr2
	+	callNrestore              //CALL DWORD PTR DS:[_mbsstr]
		                          //ADD ESP, 8
	+	PUSH(retnAddr)            //PUSH retnAddr
	+	RETN()                    //RETN
	+	MOV([Filler(1)], EAX)     //MOV DWORD PTR DS:[StrStrIA], EAX ; addr2
	+	CALL([Filler(1)])         //CALL DWORD PTR DS:[StrStrIA]
	+	PUSH(retnAddr)            //PUSH retnAddr
	+	RETN()                    //RETN
	+	ALL00                     //will be used to store [StrStrIA]
	;
	let csize = code.byteCount();

	/// 2.2 - Prepare the strings & total string size
	let strList = ["Shlwapi.dll", "StrStrIA"];
	let strings = strList.join('\x00').toHex() + ' 00';
	let ssize   = strings.byteCount();

	/// 3.1 - Allocate space to add our code
	let free = Exe.FindSpace(csize + ssize, 0x10);
	if (free < 0)
		throw NO_ALLOC;

	let freeVir = Exe.Phy2Vir(free, DIFF);

	/// 3.2 - Fill in the blanks

	// [StrStrIA]
	code = SwapFiller(code, 1, freeVir + csize - 4);

	// String addrs
	let strAddr = freeVir + csize;
	code = SwapFiller(code, 2, strAddr, 1);

	strAddr += strList[0].length + 1;
	code = SwapFiller(code, 3, strAddr, 1);

	/// 3.3 - Add the code & strings at the allocated space
	Exe.AddHex(free, code + strings);

	/// 3.4 - Create a JMP to our code
	Exe.SetJMP(addr + callOffset, freeVir, 4); //4 NOPs at the end

	return true;
};

///
/// \brief Disable for older clients. _mbsstr is not being used in them
///
InsensitiveStorageSearch.validate = () => Exe.BuildDate > 20150512;
