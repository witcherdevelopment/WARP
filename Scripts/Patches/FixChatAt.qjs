/**************************************************************************\
*                                                                          *
*   Copyright (C) ?-2015 Shinryo                                           *
*                                                                          *
*   This file is a part of WARP project (specific to RO clients)           *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author(s)     : Shinryo                                                *
*   Created Date  : 2020-11-11                                             *
*   Last Modified : 2021-03-02                                             *
*                                                                          *
\**************************************************************************/

///
/// \brief Change the failure return value in the function looking for '@' in Chat text to 1 (making a false positive)
///        For old clients, we need to hijack a CALL inside UIWindowMgr::ProcessPushButton
///
FixChatAt = function()
{
	if (Exe.Version === 6) //VC6
	{
		/// 1.1 - Find the CALL inside UIWindowMgr::ProcessPushButton
		let code =
			MOV(ECX, ESI)            //MOV ECX, ESI
		+	CALL(POS2WC)             //CALL func <- this is what we need to hijack
		+	TEST(AL, AL)             //TEST AL, AL
		+	JZ(WCp)                  //JZ SHORT POS2WC
		+	MOV(R32, [ESI, POS2WC])  //MOV reg32_A, DWORD PTR DS:[ESI+const]
		;
		let addr = Exe.FindHex(code);
		if (addr < 0)
			throw Error("Function CALL not found");

		/// 1.2 - Extract the called address (VIRTUAL).
		let func = Exe.GetTgtAddr(addr + 3);

		/// 1.3 - Get essential addresses for our function
		let GetAKS = Exe.FindFunc("GetAsyncKeyState", "USER32.dll");
		if (GetAKS < 0)
			throw Error("GetAsyncKeyState not found");

		/// 2.1 - Construct our new function
		code =
			PUSHAD                             //PUSHAD
		+	MOVZX(EAX, BYTE_PTR, [ECX, 0x2C])  //MOVZX EAX, BYTE PTR DS:[ECX+2C]
		+	TEST(EAX, EAX)                     //TEST EAX, EAX
		+	JE(0x1C)                           //JE SHORT addr1
		+	MOV(ESI, [GetAKS])                 //MOV ESI, DWORD PTR DS:[<&USER32.GetAsyncKeyState>]
		+	PUSH(0x12)                         //PUSH 12 ;       VirtualKey = VK_ALT
		+	CALL(ESI)                          //CALL ESI ;     [<&USER32.GetAsyncKeyState>]
		+	TEST(EAX, EAX)                     //TEST EAX, EAX
		+	JE(0x0E)                           //JE SHORT addr1
		+	PUSH(0x11)                         //PUSH 11 ;       VirtualKey = VK_CONTROL
		+	CALL(ESI)                          //CALL ESI ;     [<&USER32.GetAsyncKeyState>]
		+	TEST(EAX, EAX)                     //TEST EAX, EAX
		+	JE(6)                              //JE SHORT addr1
		+	POPAD                              //POPAD
		+	XOR(EAX, EAX)                      //XOR EAX,EAX
		+	RETN(4)                            //RETN 4
		+	POPAD                              //POPAD <- addr1
		+	JMP(Filler(1))				       //JMP func
		;

		/// 2.2 - Allocate space for adding our function
		let free = Exe.FindSpace(code.byteCount(), 0x10);
		if (free < 0)
			throw NO_ALLOC;

		let freeVir = Exe.Phy2Vir(free, DIFF);

		/// 2.3 - Fill in the blanks
		code = SetFillTarget(code, 1, func, freeVir, 1);

		/// 2.4 - Add our function there
		Exe.AddHex(free, code);

		/// 2.5 - Change the CALLed address from func to our function.
		Exe.SetTgtAddr(addr + 3, freeVir);
	}
	else
	{
		/// 3.1 - Find the JZ after '@' check
		let code =
			JZ(4)                        //JZ SHORT POS2WC -> POP EDI below
		+	MOV(BYTE_PTR, [R32, WC], 0)  //MOV BYTE PTR DS:[reg32_A+const], 0 ; <- this is the return value we need to change
		+	POP(EDI)                     //POP EDI
		+	POP(ESI)                     //POP ESI
		;
		let addr = Exe.FindHex(code);
		if (addr < 0)
			throw Error("'@' check not found");

		/**==============================================
		Note: The above will be followed by MOV AL,1
				and POP EBP/EBX statements
		==============================================**/

		/// 3.2 - Change 0 to 1 in MOV BYTE PTR
		Exe.SetUint8(addr + 5, 1);
	}

	return true;
};

///
/// \brief Disable for unsupported clients
///
FixChatAt.validate = IsPost2010;
