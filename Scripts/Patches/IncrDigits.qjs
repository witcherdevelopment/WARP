/**************************************************************************\
*                                                                          *
*   Copyright (C) 2020-2021 Neo Mind                                       *
*                                                                          *
*   This file is a part of WARP project (specific to RO clients)           *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author(s)     : Neo-Mind                                               *
*   Created Date  : 2020-11-12                                             *
*   Last Modified : 2021-05-14                                             *
*                                                                          *
\**************************************************************************/

///
/// \brief Modify the stack allocation and code to account for 10 digits
///        instead of 6 in CGameActor::Am_Make_Number.
///        To avoid redundant code we will use loop.
///
IncrDigits = function()
{
	/// 1.1 - Find the location where 999999 is checked &
	///       extract the register containing the value
	let refAddr, refReg;
	if (Exe.Version > 11)
	{
		let code =
			MOV(R32, 0xF423F)
		+	MOV(R32, 1)
		+	CMP([EBP, 0xC], EDX)
		+	CMOVLE(EDX, [EBP, 0xC])
		;

		refAddr = Exe.FindHex(code);
		if (refAddr < 0)
			throw Error("999999 comparison not found (VC14.16)");

		refReg = EDX;

		/// 1.2 - Retrieve the 2nd argument into EDX
		Exe.SetHex(refAddr, MOV(EDX, [EBP, 0xC]));
		refAddr += 3;
	}
	else
	{
		let parts =
		[
			CMP(R32, 0xF423F)   //CMP reg32_A, 0F423F ; 999999
		,
			Exe.Version === 6
		?
			PUSH_R				//PUSH_R
		:
			''
		,
			JLE(7)              //JLE SHORT addr
		+	MOV(R32, 0xF423F)   //MOV reg32_A, 0F423F
		]
		;

		refAddr = Exe.FindHex(parts);
		if (refAddr < 0 && Exe.BuildDate > 20190000)
		{
			parts[1] = PUSH_R + parts[1];  //PUSH reg32 before JLE
			refAddr = Exe.FindHex(parts);
		}

		if (refAddr < 0)
			throw Error("999999 comparison not found");

		refReg = R32.List[Instr.FromAddr(refAddr).MRM.RegM];
	}

	/// 1.3 - Find the start of the function (Am_Make_Number)
	code =
		PUSH(-1)            //PUSH -1
	+	PUSH(POS3WC)        //PUSH addr
	+	MOV(EAX, FS, [0])   //MOV EAX, DWORD PTR FS:[0]
	+	PUSH_EAX            //PUSH EAX
	+	(Exe.Version === 6
	?
		MOV(FS, [0], ESP)	//MOV DWORD PTR FS:[0], ESP (only for VC6)
	:
		""
	)
	+	SUB(ESP, WCp)       //SUB ESP, const
	;

	let addr = Exe.FindHex(code, refAddr - 0x40, refAddr);
	if (addr < 0)
		throw Error("Function start not found");


	/// 1.4 - Set addr to location after the SUB ESP
	addr += code.byteCount();

	/// 2.1 - Update the stack allocation 'const' to hold 4 more nibbles(16 bits) - increase the const value
	_ID_UpdateStack(addr - 1 , 1);

	/// 2.2 - Find the location of digit counter
	let StkReg = ROC.HasFP ? EBP : ESP;

	code = MOV([StkReg, WC], Exe.Version > 11 ? 6 : 1); //MOV DWORD PTR SS:[StkReg+x], 1; x is negative for StkReg == EBP
	addr = Exe.FindHex(code, refAddr + 0x10, refAddr + 0x28);
	let stackAssign = true;

	if (addr < 0)
	{
		code =
			JLE(7)       //JLE SHORT addr
		+	MOV(R32, 6)  //MOV reg32_B, 6
		+	JMP(WC)      //JMP SHORT addr
		;
		addr = Exe.FindHex(code, refAddr + 0x10, refAddr + 0x30);
		stackAssign = false;
	}
	if (addr < 0)
		throw Error("Digit counter not found");

	/// 2.3 - Save the stack addr if the code was a stack assignment
	let DigCntLoc;
	if (stackAssign)
	{
		DigCntLoc = Instr.FromAddr(addr).Disp;
	}
	else
	{
		/// 3.1 - If not then extract the register from MOV reg32_B, 6
		DigCntLoc = R32.List[Exe.GetUint8(addr + 2) - 0xB8];

		/// 3.2 - Find reg32_B getting assigned to stack location (if present)
		let addr2 = Exe.FindHex( MOV([StkReg, WC], DigCntLoc), addr, addr + 0x80); //MOV DWORD PTR SS:[StkReg+x], reg32_B ; x is negative for EBP (instruction will be followed by LEA)

		/// 3.3 - If found then save the stack displacement instead
		if (addr2 > 0)
			DigCntLoc = Instr.FromAddr(addr2).Disp;
	}

	/// 4.1 - Find the location of digit extraction
	addr = Exe.FindHex( MOV(EAX, 0x66666667), addr, addr + 0x200); //MOV EAX, 66666667 ; magic number for divide by 10
	if (addr < 0)
		throw Error("Digit extraction not found");

	/// 4.2 - Find the first digit movement to stack location
	code = MOV([StkReg, WC], R32); //MOV DWORD PTR SS:[StkReg+x], reg32_C
	let addr2 = Exe.FindHex(code + " 8B", addr + 0x5, addr + 0x38); //followed by another MOV
	if (addr2 < 0)
	{
		addr2 = Exe.FindHex(code + " F7", addr + 0x5, addr + 0x38); //followed by an IMUL
	}
	if (addr2 < 0)
	{
		addr2 = Exe.FindHex(code + " C1", addr + 0x5, addr + 0x38); //followed by an SAR
	}

	if (addr2 < 0)
		throw Error("Digit movement not found");

	/// 4.3 - Extract the stack addr for the first digit
	let FirstDigLoc = Instr.FromAddr(addr2).Disp;

	/// 4.4 - Set addr2 to location after the digit movement
	addr2 += code.byteCount();

	/// 4.5 - Find the g_modeMgr assignment after it
	addr = Exe.FindHex( MOV(ECX, POS3WC), addr2, addr2 + 0x100); //MOV ECX, g_modeMgr
	if (addr < 0)
		throw Error("g_modeMgr assignment not found");

	/// 4.6 - Extract the assignment
	let MovModeMgr = Exe.GetHex(addr, 5);

	/// 4.7 - Now find the CModeMgr::GetGameMode CALL after it (we will jump to this location after digits have been counted and extracted)
	let ggmAddr = Exe.FindHex( CALL(NEG3WC), addr + 5, addr + 0x100 ); //CALL CModeMgr::GetGameMode
	if (ggmAddr < 0)
		throw Error("GetGameMode CALL not found");

	/// 5.1 - Adjust the extracted stack offsets for the 4 extra nibbles (DigCntLoc & FirstDigLoc)
	if (ROC.HasFP)
	{
		if (IsNum(DigCntLoc) && DigCntLoc < FirstDigLoc)
			DigCntLoc -= 16;

		FirstDigLoc -= 16;
	}
	else
	{
		if (IsNum(DigCntLoc) && DigCntLoc >= (FirstDigLoc + 24)) //4 bits * 6 digits
			DigCntLoc += 16;
	}

	/// 5.2 - Prepare our digit splitter + counter code to put at refAddr
	let parts = [
		MOV(ECX, refReg)             //MOV ECX, refReg
	+	MOV(ESI, FirstDigLoc)        //MOV ESI, FirstDigLoc
	,
		MOV(EAX, 0x66666667)         //MOV EAX, 66666667 ; addr1
	+	IMUL(ECX)                    //IMUL ECX
	+	SAR(EDX, 2)                  //SAR EDX, 2
	+	LEA(EAX, [4, EDX, EDX])      //LEA EAX, [EDX*4+EDX]
	+	SHL(EAX, 1)                  //SHL EAX,1
	+	SUB(ECX, EAX)                //SUB ECX, EAX
	+	MOV([ESI, StkReg], ECX)      //MOV DWORD PTR SS:[ESI + StkReg], ECX
	+	ADD(ESI, 4)                  //ADD ESI, 4
	+	MOV(ECX, EDX)                //MOV ECX, EDX
	+	TEST(ECX, ECX)               //TEST ECX, ECX
	,
		JNE(Filler(1,1))             //JNE SHORT addr1
	+	SUB(ESI, FirstDigLoc)        //SUB ESI, FirstDigLoc; Now ESI has number of digits * 4 bytes each
	+	SAR(ESI, 2)                  //SAR ESI, 2
	+	(IsReg(DigCntLoc)
	?
		MOV(DigCntLoc, ESI)			 //MOV DigCntLoc, ESI
	:								 //or
		MOV([StkReg, DigCntLoc], ESI)//MOV DWORD PTR SS:[StkReg+DigCntLoc], ESI
	)
	+	MovModeMgr                   //MOV ECX, g_modeMgr
	,
		JMP(Filler(2))               //JMP ggmAddr
	];

	code = SetFillTarget(parts.join(''), 1, parts[0].byteCount(), 0, 1, 1);
	code = SetFillTarget(code, 2, ggmAddr, refAddr, 1);

	/// 5.3 - Put the code at refAddr
	Exe.SetHex(refAddr, code);

	/// 5.4 - Find the end of the function
	if (ROC.HasFP)
		code = MOV(ESP, EBP) + POP(EBP);    //MOV ESP, EBP followed by POP EBP
	else
		code = ADD(ESP, WC);                //ADD ESP, const

	code += RETN(0x10);                     //RETN 10

	let endAddr = Exe.FindHex(code, ggmAddr, ggmAddr + 0x200);
	if (endAddr < 0)
		throw Error("Function end not found");

	/// 5.5 - Prepare stack addr value
	let stackOff = ROC.HasFP ? 16 :  24; //4 bit * 6 digits

	/// 6 - Update all relevant stack offsets to incorporate the extra 4 digits between the ggmAddr and end of the function
	addr = ggmAddr + 5;
	while (addr < endAddr)
	{
		/// 6.1 - Get the instruction at addr
		let ins = Instr.FromAddr(addr)

		/// 6.2 - Update stack addr based on opcode
		switch (ins.Codes[0])
		{
			case 0x89:
			case 0x8B:
			case 0x8D:
			case 0xC7:
			case 0x3B:
			case 0xFF:
			case 0x83:
			{
				if (ins.Codes[0] === 0xFF && !ROC.HasFP && ins.MRM.RegO === 2) //CALL reg or CALL DWORD PTR DS:[reg+x]
					stackOff = 24; //resetting back to 24

				ins.StackLimit = FirstDigLoc + stackOff;
				if (ins.MRM.Mode === 1)
					_ID_UpdateStack(ins);

				break;
			}
			case 0x6B:
			case 0x6A:
			{
				if (!ROC.HasFP)
					stackOff += 4;

				break;
			}

			case 0xE8:
			{
				if (!ROC.HasFP)
					stackOff = 24;

				break;
			}
		}

		/// 6.3 - Set addr to next instruction location
		addr = ins.NextAddr;
	}

	/// 7 - Extra steps for some clients
	if (ROC.HasFP)
	{
		if (IsNum(DigCntLoc) && Exe.Version < 14) //VC10 & VC11 essentially
		{
			/// 7.1 - Look for MOV instruction to stack before refAddr
			code = MOV([EBP, WCn], R32); //MOV DWORD PTR SS:[EBP-x], reg32_E

			addr = Exe.FindHex(code + " 81", refAddr - 6, refAddr + 2); //above MOV followed by CMP
			if (addr < 0)
			{
				addr = Exe.FindHex(code + " 8B", refAddr - 6, refAddr + 2); //above MOV followed by another MOV
			}
			if (addr < 0)
				throw Error("Stack movement not found");

			/// 7.2 - Update the stack addr
			_ID_UpdateStack(addr + 2);
		}
	}
	else
	{
		/// 7.3 - Update the stack addr for ADD ESP, x
		_ID_UpdateStack(endAddr + 2, 1);

		/// 7.4 - Find LEA instruction before refAddr which uses ESP
		addr = Exe.FindHex( LEA(EAX, [ESP, WCp]), refAddr - 0x28, refAddr); //LEA EAX, [ESP+x]
		if (addr < 0)
			throw Error("LEA not found");

		/// 7.5 - Update the stack addr
		_ID_UpdateStack(addr + 3, 1);

		/// 7.6 - Find the ARG.2 assignment before refAddr.
		addr = Exe.FindHex( MOV(ECX, [ESP, WCp]), refAddr - 8, refAddr); //MOV ECX, DWORD PTR SS:[ESP+y]
		if (addr < 0)
			throw Error("ARG.2 assignment not found");

		/// 7.7 - Update the stack addr
		_ID_UpdateStack(addr + 3, 1);
	}

	return true;
};

///
/// \brief Disable for Unsupported Clients
///
IncrDigits.validate = () => Exe.BuildDate < 20190500;

///
/// \brief Helper function which adjusts the addr used w.r.t ESP/EBP
///        at the location/Instr provided by 16
///
_ID_UpdateStack = (arg, sign) =>
{
	let stackOff = IsNum(sign)? sign * 16
				: ROC.HasFP ? -16
				: 16
	;

	if (IsNum(arg))
	{
		Exe.SetInt8(arg, Exe.GetInt8(arg) + stackOff);
	}
	else if (('MRM' in arg) && arg.MRM.Mode === 1) //Instr object with ModRM
	{
		if  (
				( (arg.MRM.RegM === 5 ||
				(arg.MRM.RegM === 4 && arg.SIB.Base == 5))
				&& arg.Disp <= arg.StackLimit //EBP-x (two types are possible)
				) ||
				( (arg.MRM.RegM === 4 && arg.SIB.Base === 4)
				&& arg.Disp >= arg.StackLimit //ESP+x
				)
			)
		{
			arg.Disp += stackOff;
			Exe.SetHex(arg.Addr, arg.toString());
		}
	}
};