/**************************************************************************\
*                                                                          *
*   Copyright (C) 2018-2021 Andrei Karas (4144)                            *
*                                                                          *
*   This file is a part of WARP project                                    *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author(s)     : Andrei                                                 *
*   Created Date  : 2021-06-15                                             *
*   Last Modified : 2021-06-19                                             *
*                                                                          *
\**************************************************************************/

// TODO - Need deeper analysis. Older clients and Latest clients (especially VC11) don't work this way

///
/// \brief Change the z offset for shields to draw them over other sprites
///        in CPc::RenderBodyLayer function
///
DrawShieldOnTop = function()
{
	/// 1.1 - Find the locations where the Priority string is pushed.
	let addrs = Exe.FindHexN(PUSH(DSOT_Addr));
	if (addrs.isEmpty())
		throw Error("String references missing");
	
	
	/// 1.2 - Find the RenderSprite2 call after one of these PUSHes (In the default case)
	let parts =
	[
		MOVSS([ESP, 4], XMM0)     // movss dword ptr [esp+4], xmm0
	+	MOVSS(XMM0, [EBP, Exe.Version === 11 ? WCn : NEG3WC]) // movss xmm0, dword ptr [LOCAL.x]
	+	MOVSS([ESP], XMM0)        // movss dword ptr [esp], xmm0
	+	PUSH(R32)                 // push esi/eax
	,
		(Exe.Version === 11
	?
		PUSH_EAX                  // push eax
	:                             //   OR
		PUSH([EBP, NEG3WC])       // push dword ptr [LOCAL.y]
	)
	+	LEA(EAX, [EBP, NEG3WC])   // lea eax, [ebp + <spr>]
	,
		PUSH_EAX                  // push eax
	+	CALL()                    // call CRenderObject::RenderSprite2
	];

	let addr = -1;
	const findPat = (memAddr) =>
	{
		addr = Exe.FindHex(parts, memAddr + 0x80, memAddr + 0x180);
		return addr > 0;
	};
	
	let foundAddr = addrs.find(findPat);
	if (foundAddr == undefined && Exe.Version === 11)
	{
		parts[1] = PUSH([EBP, WCn]) + MOV(ECX, R32); //push dword ptr [LOCAL.z]
		                                             //mov ecx, regA
		foundAddr = addrs.find(findPat);
	}
	if (addr < 0)
		throw Error("RenderSprite2 call missing");
	
	/// 1.3 - Save the location of the call
	let hookAddr1 = addr + parts.byteCount() - 1;
	
	/// 1.4 - Find the call to RenderSprite after it
	parts = [
		PUSH_EAX                 //push eax
	+	(Exe.Version > 11
	?
		PUSH([EBP, NEG3WC])      //push dword ptr [LOCAL.x]
	:
		''
	)
	+	LEA(EAX, [EBP, NEG3WC])  //lea eax, [LOCAL.y]
	,
		PUSH_EAX                 //push eax
	+	CALL()                   //call CRenderObject::RenderSprite
	];

	addr = Exe.FindHex(parts, hookAddr1 + 5, hookAddr1 + 0x100);
	if (addr < 0)
	{
		parts[0] =
			PUSH([EBP, WCn])    //push dword ptr [LOCAL.z]
		+	MOV(ECX, R32)       //mov ecx, regA 
		;
		addr = Exe.FindHex(parts, hookAddr1 + 5, hookAddr1 + 0x100);
	}
	if (addr < 0)
		throw Error("RenderSprite call missing");
	
	/// 1.5 - Save the location of the call
	let hookAddr2 = addr + parts.byteCount() - 1;
	
	/// 1.6 - Look for the cnt usage towards the beginning of the function (starting point of the outer loop)
		
	parts =
	[
		Exe.Version === 11
	?
    	MOV(EDX, [EDI, WCp])     // 14 mov edx, [edi+3Ch]
    +	MOV(EAX, ECX)           // 17 mov eax, ecx
	+	SUB(EAX, [EDI, WCp])     // 19 sub eax, [edi+34h]
	:	
    	MOV(EAX, ECX)           // 17 mov eax, ecx
	+	SUB(EAX, [EDI, WCp])     // 19 sub eax, [edi+34h]
	+	MOV(EDX, [EDI, WCp])     // 14 mov edx, [edi+3Ch]
	,
		ADD(EAX, -2)            // 22 add eax, 0FFFFFFFEh
    +	CMP(EAX, 3)             // 25 cmp eax, 3
	];
	
	addr = Exe.FindHex(parts, foundAddr - 0x1000, foundAddr - 0x800);
	if (addr < 0)
		throw Error("post-cnt assignment missing");
	
	let code =
		MOV(R32, " 0? 00 00 00")             // 0 mov ebx/esi, 7 or 8
	+	MOV([EBP, ALLWC], R32)  // 5 mov [ebp+cnt], ebx/esi
	;
	
	addr = Exe.FindLastHex(code, addr, addr - 0x40);
	if (addr < 0)
		throw Error("cnt assignment missing");
	
	let cntLoc = Instr.FromAddr(addr + 5).Disp;
	
	/// 2.1 - Allocate space for storing 0.001
	let free = Exe.FindSpace(4);
	if (free < 0)
		throw NO_ALLOC;
	
	/// 2.2 - Add the value there.
	Exe.AddHex(free, (0.001).toIEEE());
	
	/// 2.3 - Save its VIRTUAL address
	let floatAddr = Exe.Phy2Vir(free, DIFF);
	
	/// 2.4 - Construct the new code to be added
	let template =	
        MOV(EAX, [EBP, cntLoc])  // mov eax, dword ptr [ebp+cnt]
	+	CMP(EAX, 0)              // cmp eax, 0
    +	JNZ(0x26)                // jnz +26h
	+	POP(EAX)                 // pop eax
	+	PUSH_EAX                 // push eax
	+	MOVSS(XMM0, [EAX, 0x10]) // movss xmm0, dword ptr [eax + oow]
	+	ADDSS(XMM0, [floatAddr]) // addss xmm0, dword ptr [floatAddr]
	+	MOVSS([EAX, 0x10], XMM0) // movss dword ptr [eax + oow], xmm0
	+	MOVSS(XMM0, [EAX, 0x14]) // movss xmm0, dword ptr [eax + oowUp]
	+	ADDSS(XMM0, [floatAddr]) // addss xmm0, dword ptr [floatAddr]
	+	MOVSS([EAX, 0x14], XMM0) // movss dword ptr [eax + oowUp], xmm0
	+	PUSH(Filler(1))          // push retnAddr
    +	MOV(EAX, Filler(2))      // mov eax, CRenderObject::RenderSprite/RenderSprite2
	+	JMP(EAX)                 // jmp eax
	;
	let csize = code.byteCount();
	
	[hookAddr1, hookAddr2].forEach( hookAddr =>
	{
		/// 2.5 - Allocate space for it (for each hook address)
		let free = Exe.FindSpace(csize, 0x10);
		if (free < 0)
			throw NO_ALLOC;
		
		/// 2.6 - Fill in the blanks
		code = SwapFillers(template, 
		{
			1: Exe.Phy2Vir(hookAddr + 5, CODE),
			2: Exe.GetTgtAddr(hookAddr + 1)
		}, 1);
		
		/// 2.7 - Add at allocated space
		Exe.AddHex(free, code);
		
		/// 2.8 - Create a JMP at hookAddr to our code
		Exe.SetJMP(hookAddr, free, PHYSICAL);
	});
	
	return true;
};

///
/// \brief Disable for unsupported clients.
///
DrawShieldOnTop.validate = function()
{
	if (Exe.BuildDate > 20190905 || (ROC.IsRenewal && Exe.BuildDate > 20190900))
		return false;

	DSOT_Addr = Exe.FindText("GetLayerPriority");
	return (DSOT_Addr > 0);
};