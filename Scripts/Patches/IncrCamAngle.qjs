/**************************************************************************\
*                                                                          *
*   Copyright (C) ?-2015 Shinryo                                           *
*                                                                          *
*   This file is a part of WARP project (specific to RO clients)           *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author(s)     : Shinryo                                                *
*   Created Date  : 2020-11-06                                             *
*   Last Modified : 2021-03-02                                             *
*                                                                          *
\**************************************************************************/

///
/// \brief Data to be used for the patch
///
if (typeof ICA_Data === 'undefined') //avoid redefinition
{
	ICA_Data =
	{
		LowCamAngle    : (29.5).toIEEE(), //0x41EC0000
		MediumCamAngle : (42.0).toIEEE(), //0x42280000
		HighCamAngle   : (65.0).toIEEE(), //0x42820000
	};
}

///
/// \brief Find the current camera angle and replace with the specified value
///
IncrCamAngle = function(patchName)
{
	if (Exe.Version === 6) //VC6
	{
		/// 1.1 - Find all locations where the current angle (20.0) is assigned
		let code =
			MOV([EBP, WCp], (20.0).toIEEE())  //MOV DWORD PTR SS:[EBP + const1], 41A00000 ; FLOAT 20.00000
		+	MOV(R32, [R32, POS2WC])           //MOV reg32_A, DWORD PTR DS:[reg32_B + const2]
		;
		let addrs = Exe.FindHexN(code);
		if (addrs.length < 1 || addrs.length > 2)
			throw Error("Incorrect no. of matches found");

		/// 1.2 - Change the angle value for all locations
		let newAngle = ICA_Data[patchName];
		addrs.forEach( addr => Exe.SetHex(addr + 3, newAngle) );

		/// 1.3 - Find the 2 stored angles -25.0 and -65.0 (need to be modified as well)
		code =
			(-25.0).toIEEE() //0xC1C80000 = DD FLOAT -25.00000
		+	(-65.0).toIEEE() //0xC2820000 = DD FLOAT -65.00000
		;
		addr = Exe.FindHex(code, Exe.GetSectEnd(CODE), Exe.FileSize); //Check after code section
		if (addr < 0)
			throw Error("Stored angles not found");

		/// 1.4 - Change to -1.0 and -89.0 respectively
		code =
			( -1.0).toIEEE() //0xBF800000 = DD FLOAT -1.00000
		+	(-89.0).toIEEE() //0xC2B20000 = DD FLOAT -89.00000
		;
		Exe.SetHex(addr, code);
	}
	else //newer clients
	{
		//====================================================================================//
		// Note - VC9+ compilers finally recognized to store float values which are used more //
		//        than once at an offset and use FLD/FSTP/MOVSS to place those in registers.  //
		//====================================================================================//

		/// 2.1 - Find the pattern to identify the function which assigns the angle
		let code =
			PUSH_1        //PUSH 1
		+	PUSH(0x5D)    //PUSH 5D
		+	JMP(WCp)      //JMP SHORT addr
		;
		let addr = Exe.FindHex(code);
		if (addr < 0)
			throw Error("Pattern not found");

		/// 2.2 - Find the function call within 0x80 bytes before the pattern
		code =
			MOV(ECX, ESI) //MOV ECX, ESI
		+	CALL(ALLWC)   //CALL addr1 <- this is the one we want
		+	PUSH_R        //PUSH reg32_A
		+	MOV(ECX, ESI) //MOV ECX, ESI
		+	CALL()        //CALL addr2
		;
		addr = Exe.FindHex(code, addr - 0xB0, addr);
		if (addr < 0)
			throw Error("Function CALL missing");

		/// 2.3 - Extract the function's PHYSICAL address
		addr = Exe.GetTgtAddr(addr + 3, PHYSICAL);

		/// 2.4 - Find the angle value assignment inside
		code =
			JZ(WCp)       //JZ SHORT addr
		+	FLD([POS3WC]) //FLD DWORD PTR DS:[angleAddr]
		;
		let angleAddr = Exe.FindHex(code, addr, addr + 0x800);
		if (angleAddr < 0)
		{
			code =
				JZ(WCp)               //JZ SHORT addr
			+	MOVSS(XMM$, [POS3WC]) //MOVSS XMM#, DWORD PTR DS:[angleAddr]
			;
			angleAddr = Exe.FindHex(code, addr, addr + 0x800);
		}
		if (angleAddr < 0)
			throw Error("Angle assignment missing");

		/// 2.5 - Set angleAddr to the memory location assigned
		angleAddr += code.byteCount() - 4;

		/// 3.1 - Allocate space for adding new angle
		let free = Exe.FindSpace(4);
		if (free < 0)
			throw NO_ALLOC;

		/// 3.2 - Put the new angle there
		Exe.AddHex(free, ICA_Data[patchName]);

		/// 3.3 - Update the contents of angleAddr
		Exe.SetUint32(angleAddr, Exe.Phy2Vir(free, DIFF));
	}

	return true;
};

///
/// \brief Wrappers for individual patches
///
LowCamAngle    = IncrCamAngle;
MediumCamAngle = IncrCamAngle;
HighCamAngle   = IncrCamAngle;
