/**************************************************************************\
*                                                                          *
*   Copyright (C) ?-2015 Shinryo                                           *
*   Copyright (C) 2020-2021 Neo-Mind                                       *
*                                                                          *
*   This file is a part of WARP project (specific to RO clients)           *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author(s)     : Shinryo, Neo-Mind                                      *
*   Created Date  : 2020-11-11                                             *
*   Last Modified : 2021-03-02                                             *
*                                                                          *
\**************************************************************************/

///
/// \brief Make the client call our DNS resolution function before g_accountAddr is accessed.
///        Function replaces g_accountAddr value
///
EnableDnsSupport = function()
{
	/// 1.1 - Ensure the WINMGR object has been loaded
	WINMGR.load();

	/// 1.2 - Find the common IP address across all clients
	let addr = Exe.FindText("211.172.247.115");
	if (addr < 0)
		throw Error("Common IP not found");

	/// 1.3 - Find the g_accountAddr assignment to the IP
	addr = Exe.FindHex( MOV([POS3WC], addr) ); //MOV DWORD PTR DS:[g_accountAddr], addr; ASCII "211.172.247.115"
	if (addr < 0)
		throw Error("g_accountAddr assignment not found");

	/// 1.4 - Extract g_accountAddr
	let AccountAddr = Exe.GetHex(addr + 2, 4);

	/// 2.1 - Find the code to hook our function to
	let prefix =
		CALL(NEG3WC)             //CALL g_resMgr
	+	MOV(ECX, EAX)            //MOV ECX,EAX
	+	CALL(NEG3WC)             //CALL CResMgr::Get
	+	PUSH_EAX                 //PUSH EAX
	+	WINMGR.MovECX            //MOV ECX, OFFSET g_windowMgr
	+	CALL(NEG3WC)             //CALL UIWindowMgr::SetWallpaper
	;

	let suffix = MOV(
		Exe.Version === 9 || Exe.Version === 10 ? EAX : R32, //MOV EAX, DWORD PTR DS:[g_accountAddr] or
		[AccountAddr]                                        //MOV reg32_B, DWORD PTR DS:[g_accountAddr]
	);

	addr = Exe.FindHex(prefix + suffix);

	if (addr < 0 && Exe.BuildDate > 20180000)
	{
		suffix =
			MOV(ECX, [POS4WC])   //MOV ECX, DWORD PTR DS:[g_CCheatDefenderMgr]
		+	CALL(ALLWC)          //CALL CCheatDefenderMgr::init
		+	suffix               //MOV reg32_B, DWORD PTR DS:[g_accountAddr]
		;
		addr = Exe.FindHex(prefix + suffix);
	}
	if (addr < 0)
		throw Error("Function not found");

	/// 2.2 - Extract g_resMgr
	let gResMgr = Exe.GetTgtAddr(addr + 1);

	/// 3.1 - Find some essential addresses for our function

	// gethostbyname
	let GetHostByName = Exe.FindFunc("gethostbyname", 52, "ws2_32.dll");//(#52 when imported by ordinal)
	if (GetHostByName < 0)
		throw Error("gethostbyname function not found");

	// wsprintfA
	let WsprintfA = Exe.FindFunc("wsprintfA", "USER32.dll");
	if (WsprintfA < 0)
		throw Error("wsprintfA not found");

	// IP address format
	let IPformat = Exe.FindText("%d.%d.%d.%d");
	if (IPformat < 0)
		throw Error("IP format not found");

	/// 3.2 - Prepare our function
	let dnsCode =
		CALL(Filler(1))                 //CALL g_ResMgr ; call the actual function that was supposed to be run
	+	PUSHAD                          //PUSHAD
	+	MOV(ESI, [AccountAddr])         //MOV ESI, DWORD PTR DS:[g_accountAddr]
	+	PUSH(ESI)                       //PUSH ESI
	+	CALL([GetHostByName])           //CALL DWORD PTR DS:[<&WS2_32.#52>] ; WS2_32.gethostbyname()
	+	MOV(ECX, [EAX, 0xC])            //MOV ECX, DWORD PTR DS:[EAX+0C]
	+	MOV(EDX, [ECX])                 //MOV EDX, DWORD PTR DS:[ECX]
	+	MOV(EAX, EDX)                   //MOV EAX, EDX
	+	MOVZX(ECX, BYTE_PTR, [EAX, 3])  //MOVZX ECX, BYTE PTR DS:[EAX+3]
	+	PUSH(ECX)                       //PUSH ECX
	+	MOVZX(ECX, BYTE_PTR, [EAX, 2])  //MOVZX ECX, BYTE PTR DS:[EAX+2]
	+	PUSH(ECX)                       //PUSH ECX
	+	MOVZX(ECX, BYTE_PTR, [EAX, 1])  //MOVZX ECX, BYTE PTR DS:[EAX+1]
	+	PUSH(ECX)                       //PUSH ECX
	+	MOVZX(ECX, BYTE_PTR, [EAX])     //MOVZX ECX, BYTE PTR DS:[EAX]
	+	PUSH(ECX)                       //PUSH ECX
	+	PUSH(IPformat)                  //PUSH OFFSET addr1 ; ASCII "%d.%d.%d.%d"
	+	PUSH(Filler(2))                 //PUSH OFFSET addr2 ; location is at the end of the code with Initial value "127.0.0.1"
	+	CALL([WsprintfA])               //CALL DWORD PTR DS:[<&USER32.wsprintfA>]
	+	ADD(ESP, 0x18)                  //ADD ESP,18
	+	MOV([AccountAddr], Filler(2))   //MOV DWORD PTR DS:[g_accountAddr], addr2 ; Replace g_accountAddr current value with its ip address
	+	POPAD                           //POPAD
	+	RETN()                          //RETN
	+	" 00"                           //Just a gap in between
	+	"127.000.000.001\x00".toHex()   //addr2 ; Putting enough space for 4*3 digits  + 3 Dots + 1 NULL at the end
	;
	let fullSize = dnsCode.byteCount();
	let csize = fullSize - (3*1 + 4*3 + 1); //(3 Dots, 4x3 digits, NULL)

	/// 3.3 - Allocate space to add our function
	let free = Exe.FindSpace(fullSize, 0x10);
	if (free < 0)
		throw NO_ALLOC;

	let freeVir = Exe.Phy2Vir(free, DIFF);

	/// 3.4 - Fill in the blanks
	dnsCode = SwapFillers(dnsCode, {
		1: gResMgr - (freeVir + 5),
		2: freeVir + csize
	});

	/// 3.5 - Add the function at the allocated space
	Exe.AddHex(free, dnsCode);

	/// 3.6 - Swap g_ResMgr CALL with our function
	Exe.SetTgtAddr(addr + 1, freeVir);

	return true;
};
