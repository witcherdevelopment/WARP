/**************************************************************************\
*                                                                          *
*   Copyright (C) 2013-2021 Ai4rei/AN                                      *
*   Copyright (C) 2013-2021 Neo-Mind                                       *
*                                                                          *
*   This file is a part of WARP project (specific to RO clients)           *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author(s)     : Ai4rei/AN, Neo-Mind                                    *
*   Created Date  : 2021-02-24                                             *
*   Last Modified : 2021-05-14                                             *
*                                                                          *
\**************************************************************************/

///
/// \brief Disable hard-coded hair style table and generate hair style IDs ad-hoc instead
///
IncrHairs = function(patchName)
{
	/// 1.1 - Find the format strings using a common part
	let addrs = Exe.FindTextN("\\\xB8\xD3\xB8\xAE\xC5\xEB\\%s\\%s", PHYSICAL, false, false);
	if (addrs.isEmpty())
		throw Error("Format string(s) missing");

	/// 1.2 - Extract the string addresses
	let strAddrs = addrs.map(addr => (Exe.GetUint8(addr - 1) > 0 ? addr - 6 : addr));

	/// 1.3 - Detect newer clients with Doram
	let doramOn = addrs[0] == strAddrs[0];

	let maxHairs = 65535;
	if (patchName === "IncrHairStyles")
	{
		maxHairs = Exe.GetUserInput('$maxHairs', D_Uint16, "Limit input", "Enter the maximum no of hairstyles", 100, {saveDefault: true});
		if (maxHairs === false)
			Cancel("Limit reverted to default");
	}

	strAddrs.forEach( memAddr =>
	{
		/// 2.1 - Retrieve the string & get the position of the 2nd %s
		let fmt = Exe.GetText(memAddr);
		let pos = fmt.indexOf("%s", fmt.indexOf("%s") + 1);

		/// 2.2 - Change the s to u
		Exe.SetInt8(memAddr + pos + 1, 0x75);

		/// 2.3 - Find where the string is used in a PUSH
		let refAddr = Exe.FindHex(PUSH(Exe.Phy2Vir(memAddr)));
		if (refAddr < 0)
			throw Error("Format string not used");

		/// 2.4 - Setup the stack register
		let sreg = ROC.HasFP ? EBP : ESP;

		/// 2.5 - Find the start of the function
		let code, addr = -1;
		if (Exe.BuildDate < 20111000)
		{
			code =
				(ROC.HasFP
			?	PUSH(EBP)               //PUSH EBP
			+	MOV(EBP, ESP)           //MOV EBP, ESP
			:
				PUSH_R                  //PUSH reg32
			)
			+	MOV(R32, [sreg, 0xC])   //MOV reg32_A, DWORD PTR SS:[ARG.2]
			+	MOV(EAX, [R32])         //MOV reg32_B, DWORD PTR DS:[reg32_A]
			;

			addr = Exe.FindLastHex(code, refAddr, refAddr - 0x200);
		}
		if (addr < 0)
		{
			code =
				PUSH(-1)                //PUSH -1
			+	PUSH(POS3WC)            //PUSH addr
			+	MOV(EAX, FS, [0])       //MOV EAX, DWORD PTR FS:[0]
			+	PUSH_EAX                //PUSH EAX
			;

			addr = Exe.FindLastHex(code, refAddr, refAddr - 0x400);
		}
		if (addr < 0)
			throw Error("Function start missing");

		/// 2.6 - Save the address after the code
		let beginAddr = addr + code.byteCount();

		/// 2.7 - Find the limiting comparison for hairstyle
		let prefix =
			" [01111.00] 05" //JL or JS SHORT _skip
		+	CMP(R32, WCp)    //CMP reg32_A, limit
		;
		let suffix =
			" [011111.0] 0?" //JL or JLE SHORT _skip2
		+	MOV([])          //MOV DWORD PTR [reg], 0D or 06
		;

		addr = Exe.FindHex(prefix + suffix, beginAddr, beginAddr + 0x50);
		if (addr < 0 && doramOn)
		{
			addr = Exe.FindHex(prefix + suffix, beginAddr + 0x100, beginAddr + 0x200);
		}
		if (addr < 0)
			throw Error("Limit checker missing");

		/// 2.8 - Save it for processing.
		let limiters = [addr];

		/// 2.9 - Repeat for Doram (should be within certain range after the above)
		if (doramOn)
		{
			addr = Exe.FindHex(prefix + suffix, addr + 5, addr + 0xB0);
			if (addr < 0 && Exe.BuildDate > 20160000)
				throw Error("Doram limit checker missing");

			limiters.push(addr);
		}

		limiters.forEach(addr =>
		{
			/// 2.10 - For highest limit just enforce the 2nd conditional jump
			if (maxHairs === 65535)
			{
				Exe.SetJMP(addr + 5);
			}

			/// 2.11 - For 1 byte limits directly alter the limit value used
			else if (maxHairs <= 0x7F)
			{
				Exe.SetInt8(addr + 4, Exe.GetInt8(addr + 5) === 0x7C ? maxHairs : maxHairs - 1); //JL or JLE
			}

			else
			{
				/// 2.12 - For multi byte limits, extract the register used
				let ins = Instr.FromAddr(addr + 2);
				let reg = R32.List[ins.MRM.RegM];

				/// 2.13 - Prep code to compare
				code =
					CMP(reg, maxHairs) //CMP reg, maxHairs
				+	JA(Filler(1))      //JA defAddr
				+	JMP(Filler(2))     //JMP validAddr
				;

				/// 2.14 - Find space for the code
				let free = Exe.FindSpace(code.byteCount());
				if (free < 0)
					throw NO_ALLOC;

				let freeVir = Exe.Phy2Vir(free, DIFF);

				/// 2.15 - Fill in the blanks
				code = SetFillTargets( code,
					{
						1: Exe.Phy2Vir(addr + 7, CODE),
						2: Exe.GetTgtAddr(addr + 6, 1)
					},
					freeVir
				);

				/// 2.16 - Add to allocated space
				Exe.AddHex(free, code);

				/// 2.17 - Setup a JMP to the allocated space
				Exe.SetJMP(addr, freeVir);
			}

			/// 2.18 - Change the default value to 2 instead of 0D or 6
			let ins = Instr.FromAddr(addr + 7);
			ins.Immd = 2;
			Exe.SetHex(ins.Addr, ins);
		});

		if (strAddrs.length === 1) //unified format string
		{
			/// 3.1 - Find the string table fetchers
			suffix =
				MOV(EDX, [4, R32, R32])   //MOV EDX, DWORD PTR DS:[reg32_B * 4 + reg32_A]
			;
			switch (Exe.Version)
			{
				case 9: //Remaining VC9
				{
					prefix =
						MOV(R32, [POS3WC])    //MOV reg32_A, DWORD PTR DS:[addr]
					+	MOV(R32, [EBP])       //MOV reg32_B, DWORD PTR DS:[EBP]
					;
					break;
				}
				case 10: //VC10
				{
					prefix =
						MOV(R32, [R32])       //MOV reg32_B, DWORD PTR DS:[reg32_C]
					+	MOV(R32, [POS3WC])    //MOV reg32_A, DWORD PTR DS:[addr]
					;
					break;
				}
				case 11: //VC11
				{
					prefix =
						MOV(R32, [R32])       //MOV reg32_B, DWORD PTR DS:[reg32_C]
					+	MOV(EAX, [POS4WC])    //MOV EAX, DWORD PTR DS:[addr]
					;
					break;
				}
				default: //VC14.16
				{
					prefix =
						JNE(WCp)              //JNE SHORT _skip
					+	MOV(EAX, [POS4WC])    //MOV EAX, DWORD PTR DS:[addr]
					;
					break;
				}
			}

			addrs = Exe.FindHexN(prefix + suffix, beginAddr, refAddr);
			if (addrs.isEmpty())
				throw Error("Table fetcher missing");

			/// 3.2 - Remove the 4*reg part in the MOV/LEA
			let csize = prefix.byteCount();
			addrs.forEach( addr =>
			{
				let ins = Instr.FromAddr(addr + csize);
				ins.MRM.update(null, null, ins.SIB.Base);
				ins.SIB.Data = 0x90; //quick hack to set a NOP at end.

				Exe.SetHex(ins.Addr, ins);
			});

			/// 3.3 - Calculate stack offset for 5th argument
			let arg5Off = 5*4; //5 PUSHes
			if (ROC.HasFP)
			{
				arg5Off += 4; //Account for PUSH EBP in the beginning
			}
			else
			{
				arg5Off += 3*4; //Account for PUSH -1 , PUSH addr and PUSH EAX

				addr = Exe.FindHex(SUB(ESP, POS2WC), beginAddr, beginAddr + 0x30); // Account for Stack adjustment
				if (addr < 0)
					addr = Exe.FindHex(SUB(ESP, WCp), beginAddr, beginAddr + 0x30);

				if (addr > 0)
				{
					let ins = Instr.FromAddr(addr);
					arg5Off += ins.Immd;
				}

				if (Exe.FindHex(PUSH_R.repeat(4), beginAddr, beginAddr + 0x30) > 0) // Account for extra PUSHes
					arg5Off += 4*4;

				code =
					MOV(EAX, [POS3WC]) //MOV EAX, DWORD PTR DS:[addr]
				+	XOR(EAX, ESP)      //XOR EAX, ESP
				+	PUSH_EAX           //PUSH EAX
				;
				addr = Exe.FindHex(code, beginAddr, beginAddr + 0x30);
				if (addr > 0)
				{
					arg5Off += 4;
					beginAddr = addr + code.byteCount();
				}
			}

			/// 3.4 - Find the argument PUSHes before the format string is PUSHed
			prefix =
				PUSH_R  //PUSH reg32_A
			+	PUSH_R  //PUSH reg32_B
			;
			suffix = LEA(R32, ROC.HasFP ? [EBP, WCn] : [ESP, WCp]); //LEA reg32_C, [LOCAL.x]
			addr = Exe.FindLastHex(prefix + suffix, refAddr, refAddr - 0x10);

			if (addr < 0)
			{
				suffix = LEA(R32, ROC.HasFP ? [EBP, NEG2WC] : [ESP, POS2WC]); //LEA reg32_C, [LOCAL.x]
				addr = Exe.FindLastHex(prefix + suffix, refAddr, refAddr - 0x10);
			}

			if (addr < 0)
				throw Error("Arg PUSHes missing");

			/// 3.5 - Extract the register
			let reg = R32.List[Exe.GetInt8(addr) - 0x50];

			/// 3.6 - Find where the register is assigned before it
			prefix =
				CMP([sreg, WC], 0x10) //CMP DWORD PTR SS:[LOCAL.x], 10
			;
			switch (Exe.Version)
			{
				case 9:  //VC9
				case 10: //VC10
				{
					suffix =
						MOV(reg, [sreg, WC])    //MOV reg32_A, DWORD PTR SS:[LOCAL.y] ; y = x*5 + 4
					+	JAE(WCp)                //JAE SHORT _skip
					+	LEA(reg, [sreg, WC])    //LEA reg32_A, [LOCAL.y]
					;
					break;
				}
				case 11: //VC11
				{
					suffix =
						LEA(reg, [sreg, WC])    //LEA reg32_A, [LOCAL.y] ; y = x*5 + 4
					+	CMOVAE(reg, [sreg, WC]) //CMOVAE reg32, DWORD PTR SS:[LOCAL.y]
					;
					break;
				}
				default: //VC14.16
				{
					suffix =
						PUSH([4, R32, POS3WC])  //PUSH DWORD PTR DS:[4*reg + addr]
					+	CMOVAE(reg, [sreg, WC]) //CMOVAE reg32, DWORD PTR SS:[LOCAL.y]
					;
					break;
				}
			}
			let addr2 = Exe.FindHex(prefix + suffix, addr - 0x50, addr); //VC14.16
			if (addr2 < 0)
				throw Error("Reg assignment missing");

			/// 3.7 - Save the total size of code
			csize = prefix.byteCount() + suffix.byteCount();

			/// 3.8 - Shift up the PUSH for VC14.16
			if (Exe.Version > 11)
			{
				let ins = Instr.FromAddr(addr2 + prefix.byteCount());
				Exe.SetHex(addr2, ins); //shift up the PUSH

				addr2 += ins.Size;
				csize -= ins.Size; //need to decrement since the PUSH got moved out
			}

			/// 3.9 - Prep code to change the register assignment
			code =
				MOV(reg, [sreg, arg5Off]) //MOV reg32_A, DWORD PTR SS:[Arg.5]
			+	MOV(reg, [reg])           //MOV reg32_A, DWORD PTR DS:[reg32_A]
			;

			code +=
				NOPs(csize - code.byteCount())
			;

			/// 3.10 - Replace the original
			Exe.SetHex(addr2, code);
		}
		else
		{
			/// 4.1 - Find the table fetchers
			prefix =
				MOV(R32, [R32, POS2WC]) //MOV reg32_C, DWORD PTR DS:[reg32_D + const]
			+	MOV(R32, [R32])         //MOV reg32_D, DWORD PTR DS:[reg32_C]
			;
			suffix =
				LEA(EAX, [4, R32, R32]) //LEA EAX, [reg32_B * 4 + reg32_A]
			;
			addrs = Exe.FindHexN(prefix + suffix, beginAddr, refAddr);
			let type = 1;

			if (addrs.isEmpty())
			{
				prefix =
					MOV(R32, [R32, POS2WC]) //MOV reg32_F, DWORD PTR DS:[reg32_G + const]
				;
				suffix =
					MOV(R32, [4, R32, R32]) //MOV reg32_C, DWORD PTR DS:[reg32_B * 4 + reg32_A]
				+	MOV(R32, [R32, POS2WC]) //MOV reg32_E, DWORD PTR DS:[reg32_C + const]
				;
				addrs = Exe.FindHexN(prefix + suffix, beginAddr, refAddr);
				type = 2;
			}
			if (addrs.isEmpty())
				throw Error("Table fetcher missing (Old Style)");

			/// 4.2 - Make it move the value itself instead of value*4 + base reg
			let csize = prefix.byteCount();
			addrs.forEach(addr =>
			{
				let ins = Instr.FromAddr(addr + csize);
				ins.MRM.update(3, null, ins.SIB.Index);
				ins.SIB.Data = 0x90; //quick hack to put NOP afterward

				Exe.SetHex(ins.Addr, ins);

				if (type === 1)
				{
					/// 4.3 - Find the MOV DWORD PTR after it
					let srcReg = R32.List[ins.MRM.RegO];
					let addr2 = Exe.FindHex(MOV(R32, [srcReg]), ins.NextAddr, ins.NextAddr + 0x18); //MOV reg32, DWORD PTR DS:[srcReg]
					if (addr2 < 0)
						throw Error("Register assignment missing (Old Style)");

					ins = Instr.FromAddr(addr2);
					ins.MRM.update(3, null, null);

					Exe.SetHex(ins.Addr, ins);
				}
			});
		}
	});

	return true;
};

///
/// \brief Wrappers for individual patches
///
Allow65kHairs = IncrHairs;
IncrHairStyles = IncrHairs;
