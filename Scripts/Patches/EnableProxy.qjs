/**************************************************************************\
*                                                                          *
*   Copyright (C) ?-2015 Ai4rei/AN                                         *
*   Copyright (C) 2013-2021 Neo-Mind                                       *
*                                                                          *
*   This file is a part of WARP project (specific to RO clients)           *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author(s)     : Ai4rei/AN, Neo-Mind                                    *
*   Created Date  : 2020-11-12                                             *
*   Last Modified : 2021-03-02                                             *
*                                                                          *
\**************************************************************************/

///
/// \brief Divert connect() call in CConnection::Connect() function to custom function.
///        The custom function saves the first IP used and use it for any following connection attempts.
///
EnableProxy = function()
{
	/// 1.1 - Find the string 'Failed to setup select mode'
	let addr = Exe.FindText("Failed to setup select mode");
	if (addr > 0)
	{
		/// 1.2 - Find where it is PUSHed
		addr = Exe.FindHex( PUSH(addr) );
		if (addr < 0)
			throw Error("Setup string not used");
	}
	else if (Exe.BuildDate > 20191020)
	{
		/// 1.3 - Find the new pattern
		addr = Exe.FindHex(
			(
				PUSH(0xA000)          //PUSH A000
			+	LEA(ECX, [R32, WCp])  //LEA ECX, [reg32 + const1]
			+	CALL(ALLWC)           //CALL func1
			).repeat(3)               //PUSH A000
			                          //LEA ECX, [reg32 + const2]
			                          //CALL func2
			                          //PUSH A000
			                          //LEA ECX, [reg32 + const3]
			                          //CALL func3
			+	PUSH_0                //PUSH 0
			+	PUSH_1                //PUSH 1
			+	PUSH_2                //PUSH 2
		);
		if (addr < 0)
			throw Error("New pattern not found");

		addr += 0x280;
	}
	else
		throw Error("Setup string not found");

	let code, indirectCALL, callAddr;
	if (Exe.Version === 6) //VC6
	{
		/// 2.1 - Find connect call (Direct) within 0x90 byte before the PUSH
		code =
			CALL(ALLWC)          //CALL <&WS2_32.connect>
		+   CMP(EAX, -1)         //CMP EAX, -1
		+   JNZ(WCp)             //JNZ SHORT addr
		+   CALL(ALLWC)          //CALL <&WS2_32.WSAGetLastError>
		+   CMP(EAX, 0x2733)     //CMP EAX, 2733h
		;
		indirectCALL = false;
		callAddr = Exe.FindHex(code, addr - 0x90, addr);
	}
	else //newer
	{
		/// 2.2 - Find connect call (Indirect) within 0x50 bytes before the PUSH
		code =
			(Exe.Version > 10
		?
			PUSH([R32, 4])       //PUSH DWORD PTR DS:[refReg + 4]
		:                        //  or
			MOV([R32, 0xA], R16) //MOV WORD PTR DS:[refReg + 0A], reg16_B
		)
		+	CALL([ALLWCp])       //CALL DWORD PTR DS:[<&WS2_32.connect>]
		+   CMP(EAX, -1)         //CMP EAX, -1
		+   JNZ(WCp)             //JNZ SHORT addr
		+   MOV(R32, [ALLWCp])   //MOV reg32_A, DWORD PTR DS:[<&WS2_32.WSAGetLastError>]
		+   CALL(R32)            //CALL reg32_A
		+   CMP(EAX, 0x2733)     //CMP EAX, 2733h
		;
		indirectCALL = true;
		callAddr = Exe.FindHex(code, addr - 0x60, addr);
	}

	if (callAddr < 0)
		throw Error("'connect' CALL not found");

	let refReg;
	if (indirectCALL)
	{
		/// 2.3 - Extract the register used & move callAddr to the next instruction which is the actual CALL
		let ins = Instr.FromAddr(callAddr);
		refReg = R32.List[ins.MRM.RegM];
		callAddr = ins.NextAddr;

		/// 2.4 - Change indirect CALL to direct one before we proceed
		Exe.SetUint16(callAddr, 0xE890); //NOP + CALL opcodes
		callAddr++;
	}
	else
	{
		/// 2.5 - If direct CALL, it means they are older clients and only ESI was used
		refReg = ESI;
	}

	/// 2.5 - Extract address of ws2_32.connect
	let connAddr = indirectCALL
	?
		Exe.GetInt32(callAddr + 1)
	:
		Exe.GetTgtAddr(callAddr + 1)
	;

	/// 3.1 - Create the custom function (IP saver code)
	code =
		MOV(EAX, [Filler(1)])   //MOV EAX, DWORD PTR DS:[g_saveIP]
	+   TEST(EAX, EAX)          //TEST EAX, EAX
	+   JNZ(0x08)               //JNZ SHORT addr
	+   MOV(EAX, [refReg, 0xC]) //MOV EAX, DWORD PTR DS:[refReg + 0C] ; usually ESI
	+   MOV([Filler(1)], EAX)   //MOV DWORD PTR DS:[g_saveIP], EAX
	+   MOV([refReg, 0xC], EAX) //MOV DWORD PTR DS:[refReg + 0C], EAX <- addr
	+	(indirectCALL
	?
		JMP([connAddr])         //JMP DWORD PTR DS:[<&WS2_32.connect>]
	:                           //  or
		JMP(Filler(2))          //JMP <&WS2_32.connect>; will be filled later since we need relative addr
	);

	let csize = code.byteCount();

	/// 3.2 - Allocate space for the function
	let free = Exe.FindSpace(4 + csize, 0x10); //First 4 bytes are g_saveIP
	if (free < 0)
		throw NO_ALLOC;

	let freeVir = Exe.Phy2Vir(free, DIFF);

	/// 3.3 - Set g_saveIP for index 1
	code = SwapFiller(code, 1, freeVir, 2); //Occurs twice

	/// 3.4 - Set connect address for Direct call
	if (!indirectCALL)
		code = SetFillTarget(code, 2, connAddr, freeVir, 1);

	/// 3.5 - Add the function at the allocated space
	Exe.AddHex(free, ALL00 + code);

	/// 3.6 - Redirect the connect call to use our function
	Exe.SetTgtAddr(callAddr + 1, freeVir + 4);
	ShowAddr(callAddr + 1);

	return true;
};
