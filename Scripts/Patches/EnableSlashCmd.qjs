/**************************************************************************\
*                                                                          *
*   Copyright (C) 2013-2021 Neo-Mind                                       *
*   Copyright (C) 2021 Ai4rei/AN                                           *
*                                                                          *
*   This file is a part of WARP project (specific to RO clients)           *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author(s)     : Neo-Mind, Ai4rei/AN                                    *
*   Created Date  : 2020-11-10                                             *
*   Last Modified : 2021-06-12                                             *
*                                                                          *
\**************************************************************************/

///
/// \brief Change the conditional jump for Langtype comparison inside CGameMode::SendMsg function
///        for /w & /who command as well as inside CGameMode::Zc_User_Count
///
EnableWho = function()
{
	/// 1.1 - Ensure the LANGTYPE is loaded
	LANGTYPE.load();

	/// 1.2 - Find Langtype comparison
	let code =
		MOV(EAX, [LANGTYPE]) //MOV EAX, DWORD PTR DS:[g_serviceType]
	+	CMP(EAX, 3)          //CMP EAX,3
	+	JE(POS2WC)           //JE addr1
	+	CMP(EAX, 8)          //CMP EAX,8
	+	JE(POS2WC)           //JE addr1
	+	CMP(EAX, 9)          //CMP EAX,9
	+	JE(POS2WC)           //JE addr1
	;

	let addr = Exe.FindHex(code + LEA()); //LEA ECX,[ESP + const]
	if (addr < 0)
		addr = Exe.FindHex(code + MOV(EAX)); //MOV EAX, const

	if (addr < 0)
		throw Error("Langtype comparison not found");

	/// 1.3 - NOP out all the comparisons from first JE (essentially creates a JMP in the exe)
	Exe.SetNOPs(addr + 5, code.byteCount() - 5);

	/// 2.1 - Find the common pattern to identify Zc_User_Count function
	code =
		(Exe.Version < 11 ?
		PUSH_R           //PUSH reg32_A
	:
		PUSH([R32, WCp]) //PUSH DWORD PTR DS:[reg32_A + const]
	)
	+	PUSH(0xB2)       //PUSH 0B2
	+	CALL(ALLWC)      //CALL MsgStr
	+	ADD(ESP, 4)      //ADD ESP, 4
	;
	addr = Exe.FindHex(code);
	if (addr < 0)
		throw Error("Zc_User_Count not found");

	/// 2.2 - Find the Langtype comparison before the pattern.
	code =
		JNE(WCp)            //JNE SHORT addr
	+	(Exe.Version < 11
	?
		MOV(EAX, [POS3WC])  //MOV EAX, DWORD PTR DS:[refAddr]
	+	PUSH_EAX            //PUSH EAX
	:
		PUSH([POS4WC])      //PUSH DWORD PTR DS:[refAddr]
	)
	+	CALL(ALLWC)         //CALL IsGravityAid
	+	ADD(ESP, 4)         //ADD ESP, 4
	+	TEST(AL, AL)        //TEST AL, AL
	+	JNE(WCp)            //JNE SHORT addr
	;

	let cmpAddr = Exe.FindHex(code, addr - 0x60, addr);
	if (cmpAddr < 0)
		throw Error("2nd Langtype comparison not found");

	/// 2.3 - Change the first JNE
	Exe.SetJMP(cmpAddr);

	if (Exe.Version >= 9) //VC9+ has additional steps
	{
		/// 3.1 - Find the last Langtype comparison
		code =
			CMP(EAX, 0xF) //CMP EAX, 0F
		+	JE(5)         //JE SHORT addr
		+	CMP(EAX, 4)   //CMP EAX, 4
		+	JNE(WCp)      //JNE SHORT addr2
		;
		addr = Exe.FindHex(code);

		if (addr > 0)
		{
			/// 3.2 - Retrieve the JNE SHORT target address.
			let tgtAddr = Exe.GetTgtAddr(addr + code.byteCount() - 1, 1);

			/// 3.3 - Create a JMP to it right after the CMP
			Exe.SetJMP(addr + 3, tgtAddr);
		}
	}

	return true;
};

///
/// \brief Change the conditional jump to JMP after Langtype comparison inside
///        CSession::SetTextType function when using '/showname'
///
EnableShowName = function()
{
	/// 1 - Find the Langtype comparison (don't need the langtype value to look for the pattern)
	let code =
		TEST(EAX, EAX) //TEST EAX, EAX
	+	JZ(WCp)        //JZ SHORT addr -> loading setting for showname
	+	CMP(EAX, 6)    //CMP EAX, 06
	+	JZ(WCp)        //JZ SHORT addr -> loading setting for showname
	+	CMP(EAX, 0xA)  //CMP EAX, 0A
	;

	let addr = Exe.FindHex(code);
	if (addr < 0)
		throw Error("Langtype comparison not found");

	/// 2 - Change the conditional jump
	Exe.SetJMP(addr + 2);

	return true;
};

///
/// \brief Turns TT_UNKNOWN return value into TT_NORMAL inside CSession::GetNoParamTalkType and set chatStartOffset
///        to 0 in caller (CSession::GetTalkType) instead of -1 when the return value was indeed TT_NORMAL.
///
EnableUnknCmds = function()
{
	/// 1.1 - Prep code to find the ending point of CSession::GetNoParamTalkType function. Also setup the register to be modified
	let cmn =
		(ROC.HasFP
	?
		MOV(ESP, EBP)     //MOV ESP, EBP
	+	POP(EBP)          //POP EBP
	:
		''
	)
	+	RETN(4)           //RETN 4
	;

	let prefix = MOV(EAX, [R32, 4]); //MOV EAX, DWORD PTR DS:[reg32_A + 4]
	let suffix = MOV(EAX, 3);        //MOV EAX, 3
	let movPos, tgtReg;

	switch (Exe.Version)
	{
		case 6: //VC6
		{
			prefix +=
				POP(EDI)  //POP EDI
			+	POP(ESI)  //POP ESI
			+	POP(EBX)  //POP EBX
			+	cmn       //stack restore + retn
			;
			suffix =
				POP(EDI)  //POP EDI
			+	POP(ESI)  //POP ESI
			+	suffix    //MOV EAX, 3
			+	POP(EBX)  //POP EBX
			+	cmn       //stack restore + retn
			;
			movPos = 2;
			tgtReg = ESI;
			break;
		}
		case 9: //VC9
		{
			prefix +=
				POP(EDI)  //POP EDI
			+	POP(ESI)  //POP ESI
			+	POP(ECX)  //POP ECX
			+	cmn       //stack restore + retn
			;
			suffix =
				POP(EDI)  //POP EDI
			+	suffix    //MOV EAX, 3
			+	POP(ESI)  //POP ESI
			+	POP(ECX)  //POP ECX
			+	cmn       //stack restore + retn
			;
			movPos = 1;
			tgtReg = EBP;
			break;
		}
		case 10: //VC10 &
		case 11: //VC11
		{
			prefix +=
				cmn       //stack restore + retn
			;
			suffix +=
				cmn       //stack restore + retn
			;
			movPos = 0;
			tgtReg = EDI;
			break;
		}
		default: //VC14.16
		{
			prefix +=
				POP(EDI)  //POP EDI
			+	POP(ESI)  //POP ESI
			+	cmn       //stack restore + retn
			;
			suffix =
				POP(EDI)  //POP EDI
			+	suffix    //MOV EAX, 3
			+	POP(ESI)  //POP ESI
			+	cmn       //stack restore + retn
			;
			movPos = 1;
			tgtReg = EDI;
			break;
		}
	}

	let addr = Exe.FindHex(prefix + suffix);
	if (addr < 0)
		throw Error("Function end missing");

	/// 1.2 - Modify the MOV statement to unset EAX & increment the target register
	Exe.SetHex(addr + prefix.byteCount() + movPos,
		XOR(EAX, EAX)  //XOR EAX, EAX
	+	ADD(tgtReg, 1) //ADD reg32_A, 1
	);

	/// 1.3 - Find the beginning of the function
	prefix =
		(ROC.HasFP
	?
		PUSH(EBP)      //PUSH EBP
	+	MOV(EBP, ESP)  //MOV EBP, ESP
	:
		''
	)
	+	(Exe.Version < 9 || Exe.Version > 11
	?
		SUB(ESP, 8)    //SUB ESP, 8
	:
		PUSH(ECX)      //PUSH ECX
	+	PUSH(ESI)      //PUSH ESI
	)
	;
	addr = Exe.FindLastHex(prefix, addr, addr - 0x100);
	if (addr < 0)
		throw Error("Function start missing");

	/// 1.4 - Save it's VIRTUAL address
	let funcAddr = Exe.Phy2Vir(addr, CODE);

	/// 2.1 - Find the location where the function is CALLed (the pattern would match multiple locations).
	if (Exe.Version === 6)
	{
		prefix =
			MOV(EAX, [EAX, 4])                            //MOV EAX, DWORD PTR DS:[EAX + 4]
		+	TEST(EAX, EAX)                                //TEST EAX, EAX
		+	JNZ(5)                                        //JNZ SHORT _skip
		+	MOV(EAX, POS3WC)                              //MOV EAX, addr
		;
	}
	else
	{
		prefix =
			CMP([EAX, ' 1?'], 0x10)                       //CMP DWORD PTR DS:[EAX + const], 10 ; const is either 14 or 18
		+	JB(WCp)                                       //JB SHORT addr
		+	MOV(EAX, Exe.Version < 10 ? [EAX, 4] : [EAX]) //MOV EAX, DWORD PTR DS:[memLoc] ; memLoc is either EAX + 4 (for older clients) or EAX
		;
	}
	suffix =
		MOV(ECX, ROC.HasFP ? [EBP, WCn] : [ESP, WCp])     //MOV ECX, DWORD PTR DS:[LOCAL.x]
	+	PUSH_EAX                                          //PUSH EAX
	+	CALL();                                           //CALL CSession::GetNoParamTalkType

	let addrs = Exe.FindHexN(prefix + suffix);
	if (addrs.isEmpty())
		throw Error("Function CALL missing");

	let csize = prefix.byteCount() + suffix.byteCount();

	/// 2.2 - Find the correct one by checking the function being called.
	addr = addrs.find(memAddr => Exe.GetTgtAddr(memAddr + csize) === funcAddr);
	if (!addr)
		throw Error("Only False matches found");

	/// 2.3 - Find the long JMP after the CALL (occurs twice for VC9). NOP away any OR reg32_A, -1 instructions in between
	let hookAddrs = [];
	let ins = Instr.FromAddr(addr + csize + 4);
	let count = Exe.Version === 9 ? 2 : 1;
	for ( ; count > 0; )
	{
		if (ins.Codes[0] === 0xE9)
		{
			count--;
			hookAddrs.push(ins.Addr + 1);
		}
		else if (ins.Codes[0] === 0x83 && ins.Immd === -1 )
		{
			let {Mode, RegO, RegM} = ins.MRM;
			if (Mode === 3 && RegO === 1 && RegM === tgtReg.Index) //OR tgtReg, -1
				Exe.SetNOPs(ins.Addr, 3);
		}

		ins.moveToNext(); //move to next instruction
	}

	/// 2.4 - Extract the jump target
	let retnAddr = Exe.GetTgtAddr(hookAddrs[0]);

	/// 2.5 - Check if the instruction at the target is OR reg32_A, -1
	ins = Instr.FromAddr(retnAddr, VIRTUAL);
	if (ins.Codes[0] === 0x83 && ins.Immd === -1)
	{
		let {Mode, RegO, RegM} = ins.MRM;
		if (Mode === 3 && RegO === 1 && RegM === tgtReg.Index) //Skip over if it is OR tgtReg, -1
			retnAddr += 3;
	}

	/// 3.1 - Prep new code to setup TT_NORMAL & chatStartOffset
	let code =
		DEC(tgtReg)    //DEC reg32_A ; for TT_NORMAL reg value becomes 0
	+	JZ(3)          //JZ SHORT _skip
	+	OR(tgtReg, -1) //OR reg32_A, -1 ; for all others reg value is -1
	+	JMP(Filler(1)) //JMP retnAddr
	;

	/// 3.2 - Allocate space for it
	let free = Exe.FindSpace(code.byteCount());
	if (free < 0)
		throw NO_ALLOC;

	let freeVir = Exe.Phy2Vir(free, DIFF);

	/// 3.3 - Fill in the blanks
	code = SetFillTarget(code, 1, retnAddr, freeVir, 1);

	/// 3.4 - Add to allocated space
	Exe.AddHex(free, code);

	/// 3.5 - Update the JMP targets
	hookAddrs.forEach(addr => Exe.SetTgtAddr(addr, freeVir));

	return true;
};
