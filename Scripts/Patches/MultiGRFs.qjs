/**************************************************************************\
*                                                                          *
*   Copyright (C) ?-2015 Shinryo                                           *
*   Copyright (C) 2013-2021 Neo-Mind                                       *
*                                                                          *
*   This file is a part of WARP project (specific to RO clients)           *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author(s)     : Shinryo, Neo-Mind                                      *
*   Created Date  : 2020-11-07                                             *
*   Last Modified : 2021-03-12                                             *
*                                                                          *
\**************************************************************************/

///
/// \brief Overrides data.grf loading with a custom function which loads the grf names
///        required in specified order
///
///        GRFsFromIni  - User specifies the INI file name and it is used for getting the GRF file names & their order during launch.
///        GRFsEmbedded - User specifies an existing INI file which will be used for embedding the loading of the GRF files names in order.
///
MultiGRFs = function(patchName)
{
	/// 1.1 - Ensure the DGRF object is loaded
	DGRF.load();

	/// 1.2 - Retrieve the refAddr (PUSH location)
	let addr = DGRF.RefAddr;

	/// 2.1 - Find the AddPak CALL after the PUSH
	let code, type;
	switch (Exe.Version)
	{
		case 6: //VC6
		{
			code =
				CALL(ALLWC)             //CALL CFileMgr::AddPak
			+	MOV(EDI, POS3WC)        //MOV EDI, OFFSET addr2
			;
			type = 1;
			break;
		}

		case 9:  //VC9
		case 10: // to
		case 11: //VC11
		{
			code =
				CALL(ALLWC)             //CALL CFileMgr::AddPak
			+	MOV(R32, [POS3WC])      //MOV reg32, DWORD PTR DS:[addr1]
			+	MOV(EAX, [POS3WC])      //MOV EAX, DWORD PTR DS:[addr2]
			;
			type = 2;
			break;
		}
		default: //VC14.16
		{
			code =
				CALL(ALLWC)             //CALL CFileMgr::AddPak
			+	MOV(EAX, [POS3WC])      //MOV EAX, DWORD PTR DS:[addr2]
			;
			type = 3;
			break;
		}
	}

	let callAddr = Exe.FindHex(code, addr + 5, addr + 40);
	if (callAddr < 0)
	{
		if (type === 3 || !ROC.Post2010) //VC14.16 & Pre-2010
		{
			code =
				CALL(ALLWC)         //CALL CFileMgr::AddPak
			+	PUSH(POS3WC)        //PUSH OFFSET addr; ASCII "rdata.grf" or ASCII "1pvpsak1"
			;
			callAddr = Exe.FindHex(code, addr + 5, addr + 40);
		}
		else if (type === 2) //VC9 - VC11
		{
			code = code.replace(MOV(R32, [POS3WC]), "");
			callAddr = Exe.FindHex(code, addr + 5, addr + 40);
		}
	}
	if (callAddr < 0)
		throw Error("AddPak CALL not found");

	/// 2.2 - Extract AddPak function address
	let AddPak = Exe.Phy2Vir(callAddr + 5, CODE) + Exe.GetInt32(callAddr + 1);

	/// 2.3 - Little trick to avoid changing 10 bytes (change the PUSH to MOV ECX, addr)
	Exe.SetUint8(addr, 0xB9);

	/// 3.1 - Run one of the helper functions below based on the patch name.
	///       Helper functions were made for better readability.
	///       Only the uncommon activities are being done in the seperate functions
	///
	if (patchName === "GRFsFromIni")
		_MG_INI(callAddr, AddPak);
	else
		_MG_EMB(callAddr, AddPak);

	/// 3.2 - Find the string 'rdata.grf' and zero it out if present
	if (ROC.IsRenewal)
		Exe.SetInt8(ROC.RGrfPhy, 0);

	return true;
};

///
/// \brief Wrappers for individual patches
///
GRFsFromIni  = MultiGRFs;
GRFsEmbedded = MultiGRFs;

///
/// \brief Adds the function to read INI and hacks AddPak CALL which loads data.grf to use it
///
_MG_INI = (callAddr, AddPak) =>
{
	/// 1.1 - Get the essential addresses for our function
	if (ROC.GetModHandle < 0)
		throw Error("GetModuleHandleA not found");

	if (ROC.GetProcAddr < 0)
		throw Error("GetProcAddress not found");

	if (ROC.Kernel32 < 0)
		throw Error("'KERNEL32.dll' not found");

	/// 1.2 - Create the function code
	let code =
		ENTER(0x80, 0)                  //ENTER 80, 0
	+	PUSHAD                          //PUSHAD
	+	PUSH(ROC.Kernel32)              //PUSH addr1 ; ASCII "KERNEL32"
	+	CALL([ROC.GetModHandle])        //CALL DWORD PTR DS:[<&KERNEL32.GetModuleHandleA>]
	+	TEST(EAX, EAX)                  //TEST EAX, EAX
	+	JZ(0x23)                        //JZ SHORT addr2
	+	MOV(EDI, [ROC.GetProcAddr])     //MOV EDI,DWORD PTR DS:[<&KERNEL32.GetProcAddress>]
	+	PUSH(Filler(1))                 //PUSH addr3 ; ASCII "GetPrivateProfileStringA"
	+	MOV(EBX, EAX)                   //MOV EBX, EAX
	+	PUSH_EAX                        //PUSH EAX ; hModule
	+	CALL(EDI)                       //CALL EDI ; GetProcAddress()
	+	TEST(EAX, EAX)                  //TEST EAX, EAX
	+	JZ(0x0F)                        //JZ SHORT addr2
	+	MOV([EBP, -0xA], EAX)           //MOV DWORD PTR SS:[EBP-0A], EAX
	+	PUSH(Filler(2))                 //PUSH addr4 ; ASCII "WritePrivateProfileStringA"
	+	MOV(EAX, EBX)                   //MOV EAX, EBX
	+	PUSH_EAX                        //PUSH EAX ; hModule
	+	CALL(EDI)                       //CALL EDI ; GetProcAddress()
	+	TEST(EAX, EAX)                  //TEST EAX, EAX
	+	JZ(0x6E)                        //JZ SHORT loc_735E71
	+	MOV([EBP, -6], EAX)             //MOV DWORD PTR SS:[EBP-6], EAX
	+	XOR(EDX, EDX)                   //XOR EDX, EDX
	+	MOV(WORD_PTR, [EBP, -2], 0x39)  //MOV WORD PTR SS:[EBP-2], 39 ; char 9
	+	PUSH(EDX)                       //PUSH EDX
	+	PUSH(Filler(4))                 //PUSH addr5 ; INI filename
	+	PUSH(0x74)                      //PUSH 74
	+	LEA(EBX, [EBP, -0x7F])          //LEA EBX, [EBP-7F]
	+	PUSH(EBX)                       //PUSH EBX
	+	LEA(EAX, [EBP, -2])             //LEA EAX, [EBP-2]
	+	PUSH_EAX                        //PUSH EAX
	+	PUSH_EAX                        //PUSH EAX
	+	PUSH(Filler(3))                 //PUSH addr6 ; ASCII "Data"
	+	CALL([EBP, -0xA])               //CALL DWORD PTR SS:[EBP-0A]
	+	LEA(ECX, [EBP, -2])             //LEA ECX, [EBP-2]
	+	MOV(CX, [ECX])                  //MOV CX, WORD PTR DS:[ECX]
	+	LEA(EBX, [EBP, -0x7F])          //LEA EBX, [EBP-7F]
	+	CMP(CX, [EBX])                  //CMP CX, WORD PTR DS:[EBX]
	+	POP(EDX)                        //POP EDX
	+	JZ(0xE)                         //JZ SHORT addr7
	+	PUSH(EDX)                       //PUSH EDX
	+	PUSH(EBX)                       //PUSH EBX
	+	DGRF.MovFMgr                    //MOV ECX, g_fileMgr
	+	CALL(Filler(5))                 //CALL CFileMgr::AddPak()
	+	POP(EDX)                        //POP EDX
	+	INC(EDX)                        //INC EDX
	+	DEC(BYTE_PTR, [EBP, -2])        //DEC BYTE PTR SS:[EBP-2]
	+	CMP(BYTE_PTR, [EBP, -2], 0x30)  //CMP BYTE PTR SS:[EBP-2], 30
	+	JNB(-0x3F)                      //JNB SHORT addr8
	+	TEST(EDX, EDX)                  //TEST EDX, EDX
	+	JNZ(0x20)                       //JNZ SHORT addr9
	+	PUSH(Filler(4))                 //PUSH addr5 ; INI filename
	+	PUSH(DGRF.Addr)                 //PUSH OFFSET addr ; "data.grf"
	+	MOV(WORD_PTR, [EBP, -2], 0x32)  //MOV WORD PTR SS:[EBP-2], 32
	+	LEA(EAX, [EBP, -2])             //LEA EAX, [EBP-2]
	+	PUSH_EAX                        //PUSH EAX
	+	PUSH(Filler(3))                 //PUSH addr6 ; ASCII "Data"
	+	CALL([EBP, -6])                 //CALL DWORD PTR SS:[EBP-6]
	+	TEST(EAX, EAX)                  //TEST EAX, EAX
	+	JNZ(-0x69)                      //JNZ SHORT
	+	POPAD                           //POPAD
	+	LEAVE                           //LEAVE
	+	RETN() + " 00"                  //RETN and a gap before strings begin
	;

	/// 2.1 - Get the INI file name from user
	let iniFile = Exe.GetUserInput('$dataINI', D_Text, "INI File path", "Enter the name of the INI file", "DATA.INI", {minLen: 1, maxLen: 20, saveDefault: true});
	if (iniFile === false || iniFile.trim().isEmpty())
		Cancel("No File name specified");

	iniFile = ".\\" + iniFile;

	/// 2.2 - Put all the strings in an array (we need their individual lengths later)
	let strList = ["GetPrivateProfileStringA", "WritePrivateProfileStringA", "Data", iniFile];

	/// 2.3 - Join the strings with NULL in between and convert to Hex
	let strings = strList.join("\x00").toHex() + " 00";

	/// 2.4 - Allocate space to add our function
	let free = Exe.FindSpace(code.byteCount() + strings.byteCount(), 0x10);
	if (free < 0)
		throw NO_ALLOC;

	let freeVir = Exe.Phy2Vir(free, DIFF);

	/// 2.5 - Fill in the blanks
	let strPos = freeVir + code.byteCount();
	strList.forEach( (str, idx) =>  //the strings
	{
		code = SwapFiller(code, idx + 1, strPos, 2);
		strPos += str.length + 1;     //1 for null
	});
	code = SetFillTarget(code, 5, AddPak, freeVir, 1);//AddPak function

	/// 3.1 - Add the function at the allocated space
	Exe.AddHex(free, code + strings);

	/// 3.2 - Change the AddPak CALL to use our function
	Exe.SetTgtAddr(callAddr + 1, freeVir);
};

///
/// \brief Prepares the function to load grf files, adds it to the client and hacks AddPak CALL which loads data.grf to use it
///
/// The grf file names are retrieved in order from user specified ini file
///
_MG_EMB = (callAddr, AddPak) =>
{
	/// 1.1 - Get the INI file from user to read
	let file = Exe.GetUserInput('$inpMultGRF', D_InFile, "File Input", "Enter your INI file", "Inputs/Sample_DATA.INI");
	if (file === false)
		Cancel("No input file received");

	if (file.isEmpty())
		Cancel("Empty file name received");

	let handle = new TextFile(file, 'r');
	if (!handle.Valid)
		throw Error("INI file is not readable");

	/// 1.2 - Read the GRF filenames from the INI file into an array
	let grfNames = [];
	while (!handle.AtEnd())
	{
		let line = handle.ReadLine().trim();
		let matches = line.match(/^(\d)\s*=\s*(.*)/);
		if (!matches)
			continue;

		let index = matches[1];
		let value = matches[2].trim();
		grfNames[index] = value;
	}
	handle.Close();

	/// 1.3 - Account for empty input file (atleast data.grf should be there)
	if (grfNames.isEmpty())
		grfNames[0] = DGRF.Name;

	/// 1.4 - Remove empty indices
	grfNames = grfNames.filter( name => name ?? false );

	/// 2.1 - Prepare template for load 1 GRF (same needs to be repeated for all GRF files)
	let template =
		PUSH(Filler(1))  //PUSH OFFSET addr; GRF name
	+	DGRF.MovFMgr     //MOV ECX, OFFSET g_fileMgr
	+	CALL(Filler(2))  //CALL CFileMgr::AddPak()
	;
	let tsize = template.byteCount();

	/// 2.2 - Join the strings with NULL in between and convert to Hex
	let strings = grfNames.join("\x00").toHex() + " 00";

	/// 2.3 - Allocate space to add our function
	let fullSize = grfNames.length * tsize + 2 + strings.byteCount(); //2 is for RETN & a null to leave a gap between the function and the strings
	let free = Exe.FindSpace(fullSize, 0x10);
	if (free < 0)
		throw NO_ALLOC;

	let freeVir = Exe.Phy2Vir(free, DIFF);

	/// 2.4 - Prepare the full code using the template with proper values
	let strAddr = freeVir + grfNames.length * tsize + 2;    //Address of first string
	let funAddr = AddPak - (strAddr - 2);                   //Difference value for Last AddPak CALL location (first string needs to be loaded last)

	let code = "";
	grfNames.forEach( name =>
	{
		code = SwapFillers(template, {
			1: strAddr,
			2: funAddr
		})
		+ code;

		strAddr += name.length + 1;  //Extra 1 for NULL byte
		funAddr += tsize;            //Increasing the difference => CALL location is closer/lesser
	});

	code += RETN() + " 00";//RETN and 1 extra NULL

	/// 2.5 - Add the function at the gap
	Exe.AddHex(free, code + strings);

	/// 2.6 - Change the AddPak CALL to use our function
	Exe.SetTgtAddr(callAddr + 1, freeVir);
};

/**
NOTES
If you enable this feature, you will need to create an INI file in the format below

--------[ Example of INI file ]---------
[data]
0=bdata.grf
1=adata.grf
2=sdata.grf
3=data.grf
.
.
9=something.grf
----------------------------------------

For the first version (Ini), you can specify the name of the file and it is expected to be in your client folder.
For the second version (Embed), you need to have made the file beforehand and specify its path to the patch to load it.

You can only load up to 10 total grf files with this option (0-9).
The read priority is 0 first to 9 last.
If you only have say 3 GRF files then you only need to use the first 3 keys i.e. 0, 1, and 2
**/
