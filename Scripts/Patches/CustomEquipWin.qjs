/**************************************************************************\
*                                                                          *
*   Copyright (C) 2020-2021 Functor                                        *
*   Copyright (C) 2020-2021 CH.C (jchcc)                                   *
*   Copyright (C) 2020-2021 Andrei Karas (4144)                            *
*   Copyright (C) 2020-2021 X-EcutiOnner (xex.ecutionner@gmail.com)        *
*                                                                          *
*   This file is a part of WARP project (specific to RO clients)           *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author(s)     : Functor, CH.C (jchcc), Andrei (4144), X-EcutiOnner     *
*   Created Date  : 2020-11-11                                             *
*   Last Modified : 2021-05-14                                             *
*                                                                          *
\**************************************************************************/

///
/// \brief Change the EAX after comparison to remove equipment swap button both on the
///        equipment window and costume window inside SWAPEQUIPMENTWNDINFO function.
///
NoEquipSwap = function()
{
	/// 1.1 - Find the location where equipment function is called
	let parts =
	[//0
		CALL(NEG3WC)            // CALL sub_59E810
	+	MOV(EAX, [EDI, 0x18])   // MOV EAX, DWORD PTR DS:[EDI+18]
	+	MOV(ECX, [EDI, POS2WC]) // MOV ECX, DWORD PTR DS:[EDI+const]
	,//1
		SUB(EAX, 0x14)          // SUB EAX, 14
	,//2
		Exe.Version <= 11
	?
		MOV(EDX, [ECX])         // MOV EDX, DWORD PTR DS:[ECX]
	:
		''
	,//3
		PUSH_EAX                // PUSH EAX
	];
	let addr = Exe.FindHex(parts);
	if (addr < 0)
		throw Error("Equip Function CALL missing");

	/// 1.2 - Change the SUB to ADD
	Exe.SetHex(addr + parts[0].byteCount(), ADD(EAX, 0x14));

	/// 2.1 - Find the location where costume function is called
	let code =
		MOV(ECX, [ESI, POS2WC]) // MOV ECX, DWORD PTR DS:[ESI + const]
	+	TEST(ECX, ECX)          // TEST ECX, ECX
	+	JZ(0x6F)                // JZ SHORT addr
	+	MOV(EAX, [ESI, POS1WC]) // MOV EAX, DWORD PTR DS:[ESI + const2]; const2 < const
	+	MOV(EDX, [ECX])         // MOV EDX, DWORD PTR DS:[ECX]
	+	ADD(EAX, 0x93)          // ADD EAX, 93
	+	PUSH_EAX                // PUSH EAX
	;
	addr = Exe.FindHex(code);

	if (addr < 0)
		throw Error("Costume function CALL missing");

	/// 2.2 - Change 93 to FF
	Exe.SetUint8(addr + code.byteCount() - 5, 0xFF);

	return true;
};

///
/// \brief Disable for Unsupported Clients - Check for Reference
///
NoEquipSwap.validate = () => Exe.BuildDate >= 20170208;

///
/// \brief Change the JNZ after comparison to remove title window button
///        on the equipment window inside EQUIPMENTWNDINFO function.
///
NoEquipWinTitle = function()
{
	/// 1 - Find the location where equipment function is called
	let delta = Exe.BuildDate > 20170000 ? POS2WC : WCp;
	let prefix =
		CALL(NEG3WC)              //CALL UITabControl_AddTab
	+	CMP([EDI, delta], 0)      //CMP DWORD PTR DS:[EDI + UIEquipWnd.m_typeWnd], 0
	;
	let suffix =
		JNZ(0x19)                 //JNZ SHORT addr
	+	PUSH(0xA7D)               //PUSH 0A7D
	+	CALL(ALLWC)               //CALL MsgStr
	+	MOV(ECX, [EDI, POS2WC])   //MOV ECX, DWORD PTR DS:[EDI + UIEquipWnd.m_UITabControl]
	+	ADD(ESP, 4)               //ADD ESP, 4
	+	PUSH_EAX                  //PUSH EAX
	+	CALL()                    //CALL UITabControl_AddTab
	;

	/* - Used for debugging
	let addTabOffsets = [1, 35];
	let typeWndOffset = [7, 4];
	let msgStrOffset = 20;
	let tabControlOffset = [26, 4];
	*/

	let addr = Exe.FindHex(prefix + suffix);
	if (addr < 0)
		throw Error("Pattern not found");

	/*
	for (let i = 0; i < addTabOffsets.length; i++)
	{
		logRawFunc("UITabControl_AddTab", addr, addTabOffsets[i]);
	}
	logField("UIEquipWnd::m_typeWnd", addr, typeWndOffset);
	logRawFunc("MsgStr", addr, msgStrOffset);
	logField("UIEquipWnd::m_UITabControl", addr, tabControlOffset);
	*/

	/// 2 - Change JNZ to JMP
	Exe.SetJMP(addr + prefix.byteCount());

	return true;
}

///
/// \brief Disable for Older Clients - Check for Reference
///
NoEquipWinTitle.validate = () =>
	(ROC.IsRenewal && Exe.BuildDate >= 20141126) || Exe.BuildDate >= 20150225;
