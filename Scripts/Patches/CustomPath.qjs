/**************************************************************************\
*                                                                          *
*   Copyright (C) 2013-2021 Neo-Mind                                       *
*   Copyright (C) 2018-2021 Jian                                           *
*   Copyright (C) 2017 Secret                                              *
*   Copyright (C) 2017-2021 Andrei Karas (4144)                            *
*   Copyright (C) 2020-2021 X-EcutiOnner                                   *
*                                                                          *
*   This file is a part of WARP project (specific to RO clients)           *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author(s)     : Neo-Mind, Jian, Secret, Andrei (4144), X-EcutiOnner    *
*   Created Date  : 2020-11-09                                             *
*   Last Modified : 2021-05-14                                             *
*                                                                          *
\**************************************************************************/

///
/// \brief Data to be used for the patches.
///
if (typeof CP_Data === 'undefined') //avoid redefinition
{
	CP_Data =
	{
		CustomDefaultBGM :
		{
			strType : "Path",
			varName : '$newBGMPath',
			prefix : "Default BGM",
			name : "bgm\\01.mp3"
		},

		CustomItemInfoLub :
		{
			strType : "Path",
			varName : '$newItemInfo',
			prefix : "ItemInfo Lua",
			parts : ["System/iteminfo", "Sak.lub", "true.lub", ".lub"]
		},

		CustomAchieveLub :
		{
			strType : "Path",
			varName : '$newAchieveList',
			prefix : "Achievement List Lua",
			name : "system\\Achievement_list.lub"
		},

		CustomMonSizeEffLub :
		{
			strType : "Path",
			varName : '$newMonSizeEffect',
			prefix : "Monster Size Effect Lua"
		},

		CustomTownInfoLub :
		{
			strType : "Path",
			varName : '$newTownInfo',
			prefix : "Town Info Lua",
			name : "System/Towninfo.lub"
		},

		CustomPetEvoClnLub :
		{
			strType : "Path",
			varName : '$newPetEvoCln',
			prefix : "Pet Evolution Lua",
			parts : ["system\\PetEvolutionCln", "sak.lub", "true.lub", ".lub"]
		},

		CustomTipboxLub :
		{
			strType : "Path",
			varName : '$newTipBox',
			prefix : "Tip Box Lua",
			name : "System/tipbox.lub"
		},

		CustomCheckAttLub :
		{
			strType : "Path",
			varName : '$newCheckAtt',
			prefix : "Check Attendance Lua",
			name : "System/CheckAttendance.lub"
		},

		CustomPrivAirplaneLub :
		{
			strType : "Path",
			varName : '$newPrivAirplane',
			prefix : "Private Airplane Lua",
			parts : ["System\\PrivateAirplane", "Sakray.lub", "True.lub", ""]
		},

		CustomMapInfoLub :
		{
			strType : "Path",
			varName : '$newMapInfo',
			prefix : "MapInfo Lua",
			parts : ["system\\mapInfo", "sak.lub", "true.lub", ""]
		},

		CustomOngQuestInfoLub :
		{
			strType : "Prefix",
			varName : '$newOngQInfoList',
			prefix : "Ongoing QuestInfoList Lua",
			parts : ["system\\OngoingQuestInfoList", "Sakray", "True", ""]
		},

		CustomRcmdQuestInfoLub :
		{
			strType : "Prefix",
			varName : '$newRcmdQInfoList',
			prefix : "Recommended QuestInfoList Lua",
			parts : ["system\\RecommendedQuestInfoList", "Sakray", "True", ""]
		},
	};
}

///
/// \brief Common function to change specific file paths
///
CustomPath = function(patchName)
{
	/// 1.1 - Retrieve the data for the index
	let {varName, prefix, strType, addr, name} = CP_Data[patchName];

	/// 1.2 - Find location where the string is used in a PUSH
	addr = Exe.FindHex( PUSH(addr) );
	if (addr < 0)
		throw Error(`'${name} not used`);

	/// 1.2 - Get the new file name from user
	let suf = strType === "Prefix" ? "without .lub" : "";
	let newStr = Exe.GetUserInput(
		varName, D_Text, `File ${strType}`,
		`Enter the new <b>${prefix} ${strType}</b> (relative to RO folder) ${suf}`,
		name, {minLen: 1, maxLen: 100}
	);

	if (newStr === false)
		Cancel(strType, name);

	/// 2.1 - Allocate space to add the file name
	let free = Exe.FindSpace(varName);
	if (free < 0)
		throw NO_ALLOC;

	/// 2.2 - Add the name there
	Exe.AddFromVar(free, varName);

	/// 2.3 - Update the PUSHed address
	Exe.SetUint32(addr + 1, Exe.Phy2Vir(free, DIFF));

	return true;
};

///
/// \brief Common functions to validate
///
CustomPath.validate = (patchName) =>
{
	let data = CP_Data[patchName];

	if ('parts' in data) //need to derive the name from parts and then find its address.
	{
		let [pref, sakSuf, truSuf, suf] = data.parts;

		let name = pref + "_" + (ROC.IsRenewal ? sakSuf : truSuf);
		let addr = Exe.FindText(name);

		if (addr < 0)
		{
			name = pref + suf;
			addr = Exe.FindText(name);
		}

		if (addr > 0)
		{
			data.addr = addr;
			data.name = name;
			return true;
		}
	}
	else //name is provided directly
	{
		let {name} = CP_Data[patchName];
		let addr = Exe.FindText(name);

		if (addr > 0)
		{
			CP_Data[patchName].addr = addr;
			return true;
		}
	}

	return false;
};

///
/// Wrappers for Individual Patches
///
CustomDefaultBGM       = CustomPath;
CustomItemInfoLub      = CustomPath;
CustomAchieveLub       = CustomPath;
CustomTownInfoLub      = CustomPath;
CustomPetEvoClnLub     = CustomPath;
CustomTipboxLub        = CustomPath;
CustomCheckAttLub      = CustomPath;
CustomPrivAirplaneLub  = CustomPath;
CustomMapInfoLub       = CustomPath;
CustomOngQuestInfoLub  = CustomPath;
CustomRcmdQuestInfoLub = CustomPath;

CustomMonSizeEffLub = patchName => CustomPath(patchName);
CustomMonSizeEffLub.validate = (patchName) =>
{
	let suf = (ROC.IsRenewal ? "_sak" : "");

	let name = "System/monster_size_effect" + suf + "_new.lub";
	let addr = Exe.FindText(name);
	if (addr < 0)
	{
		name = "System/monster_size_effect" + suf + ".lub";
		addr = Exe.FindText(name);
	}

	if (addr > 0)
	{
		CP_Data[patchName].addr = addr;
		CP_Data[patchName].name = name;
		return true;
	}

	return false;
};

///
/// \brief Change the "..\\licence.txt" & the EULA error string reference to user specified file
///
Orig_LicTxt = "..\\licence.txt";
CustomLicenseTxt = function()
{
	/// 1.1 - Find the string '..\\licence.txt'
	let addr = Exe.FindText(Orig_LicTxt);
	if (addr < 0)
		throw Error(`'${Orig_LicTxt}' not found`);

	/// 1.2 - Find where it is assigned
	addr = Exe.FindHex( MOV([POS3WC], addr) ); //MOV DWORD PTR DS:[g_licence], stringAddr
	if (addr < 0)
		throw Error(`'${Orig_LicTxt}' not assigned`);

	/// 2.1 - Get new Filename from user
	let varName = '$licenseTXT';
	let newFile = Exe.GetUserInput(varName, D_Text, "License file", "Enter the name of the Txt file", Orig_LicTxt, {minLen: 9, maxLen: 14});
	if (newFile === false)
		Cancel("License file", Orig_LicTxt);

	/// 2.2 - Allocate space to add new file name
	let free = Exe.FindSpace(varName);
	if (free < 0)
		throw NO_ALLOC;

	/// 2.3 - Add the file name there
	Exe.AddFromVar(free, varName);

	/// 2.4 - Change the address in the assignment
	Exe.SetInt32(addr + 6, Exe.Phy2Vir(free, DIFF));

	/// 3.1 - Find EULA string
	addr = Exe.FindText("No EULA text file. (licence.txt)");
	if (addr < 0)
		throw Error("EULA string not found");

	/// 3.2 - Prepare the new EULA error string using the filename received
	let eulaString = "No EULA text file. (" + newFile.replace("..\\", "") + ")\x00";

	/// 3.3 - Allocate space to add the EULA error string
	free = Exe.FindSpace(eulaString.length);
	if (free < 0)
		throw NO_ALLOC;

	let freeVir = Exe.Phy2Vir(free, DIFF);

	/// 3.4 - Add the EULA error string
	Exe.AddText(free, eulaString);

	/// 3.5 - Update all PUSHes & assigments using the original EULA error string
	let found = [
		PUSH(0x20) + PUSH(addr),
		MOV(ESI, addr),
		MOV(EDI, addr)
	].filter( code =>
	{
		let addrs = Exe.FindHexN(code);
		if (addrs.isEmpty())
			return false;

		let csize = code.byteCount();
		addrs.forEach( addr => Exe.SetInt32(addr + csize - 4, freeVir) );

		return true;
	});

	if (found.isEmpty())
		throw Error("No EULA references found");

	return true;
};

///
/// \brief Change the clientinfo.xml reference to custom file specified by user
///
CustomClientInfo = function()
{
	/// 1.1 - Ensure the DGRF object is loaded
	DGRF.load();

	/// 1.2 - Retrieve the refAddr (PUSH location) & calculate the end address
	let fromAddr = DGRF.RefAddr;
	let toAddr = fromAddr + 0x100; //may not need this much

	/// 1.3 - Find where the XML is referenced
	let patterns;
	if (Exe.Version > 10.0) //VC11+
	{
		patterns = [
			MOVQ(XMM$, [CCI_Addr]),
			MOVUPS(XMM$, [CCI_Addr])
		];
	}
	else
	{
		patterns = [
			MOV(R32, [CCI_Addr]),
			MOV(EAX, [CCI_Addr]),
			MOV(R32, CCI_Addr)
		];
	}

	let addr = -1;
	let hasMore; //indicates there are more addresses for replacement

	let code = patterns.find( (pat, index) =>
	{
		addr = Exe.FindHex(pat, fromAddr, toAddr);
		hasMore = index < patterns.length - 1; //false for the last index in both pattern list

		return (addr > 0);
	});

	if (addr < 0)
		throw Error("clientinfo not used");

	/// 1.4 - Add the address & displacement offset to repLocs
	let repLocs = new Map();
	repLocs.set(0, addr + code.byteCount() - 4);

	/// 1.3 - Find the additional references & save the locations where replacement need to be made
	if (hasMore)
	{
		let has4th = true;
		if (Exe.Version > 10.0)//VC11+
		{
			if (CCI_Name === "sclientinfo.xml")
			{
				addr = Exe.FindHex(MOVSS(XMM$, [CCI_Addr + 8]), fromAddr, toAddr);
				if (addr < 0)
				{
					has4th = false; //already takes care of the 4th part because 8 bytes are retrieved
					addr = Exe.FindHex(MOVQ(XMM$, [CCI_Addr + 8]), fromAddr, toAddr);
				}
				if (addr < 0)
					throw Error("2nd reference missing");

				repLocs.set(8, addr + 4);
			}
			else
			{
				addr = Exe.FindHex(MOV(EAX, [CCI_Addr + 8]), fromAddr, toAddr);
				if (addr < 0)
					throw Error("2nd reference missing");

				repLocs.set(8, addr + 1);

				addr = Exe.FindHex(MOV(AX, [CCI_Addr + 0xC]), fromAddr, toAddr);
				if (addr < 0)
					throw Error("3rd reference missing");

				repLocs.set(0xC, addr + 2);
			}
		}
		else
		{
			[4, 8, 0xC].forEach( (disp, idx) =>
			{
				addr = Exe.FindHex(MOV(R32, [CCI_Addr + disp]), fromAddr, toAddr);
				let offset = 2;

				if (addr < 0)
				{
					addr = Exe.FindHex(MOV(EAX, [CCI_Addr + disp]), fromAddr, toAddr);
					offset = 1;
				}
				if (addr < 0)
					throw Error("Reference no." + (idx + 2) + " missing");

				repLocs.set(disp, addr + offset);
			});
		}

		if (has4th)
		{
			addr = Exe.FindHex(MOV(AL, [CCI_Addr + 0xE]), fromAddr, toAddr);
			let offset = 1;

			if (addr < 0)
			{
				addr = Exe.FindHex(MOV(R8, [CCI_Addr + 0xE]), fromAddr, toAddr);
				offset = 2;
			}
			if (addr < 0)
				throw Error("4th reference missing");

			repLocs.set(0xE, addr + offset);
		}
	}

	/// 2.1 - Get the new name from the user
	let varName = '$newclientinfo';
	let newFile = Exe.GetUserInput(varName, D_Text, "Client Info XML", "Enter the new clientinfo path", CCI_Name, {minLen: 9, maxLen: 20});
	if (newFile === false)
		Cancel("Filename", CCI_Name);

	/// 2.2 - Allocate space for the new name
	let free = Exe.FindSpace(varName);
	if (free < 0)
		throw NO_ALLOC;

	/// 2.3 - Add the name there
	Exe.AddFromVar(free, varName);

	/// 2.4 - Adjust the references
	let freeVir = Exe.Phy2Vir(free, DIFF);
	repLocs.forEach( (addr, disp) => Exe.SetUint32(addr, freeVir + disp) );

	return true;
};

///
/// \brief Disable for Unsupported clients
///
CustomClientInfo.validate = function()
{
	/// 1.1 - Check if the client is Sakray (clientinfo file name is "sclientinfo.xml" for some Sakray clients)
	CCI_Name = "sclientinfo.xml";
	CCI_Addr = Exe.FindText(CCI_Name);

	if (CCI_Addr < 0) // if sclientinfo.xml does not exist then it is a main server exe
	{
		CCI_Name = "clientinfo.xml";
		CCI_Addr = Exe.FindText(CCI_Name);
	}

	return (CCI_Addr > 0);
};
