/**************************************************************************\
*                                                                          *
*   Copyright (C) 2013-2021 Neo-Mind                                       *
*                                                                          *
*   This file is a part of WARP project (specific to RO clients)           *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author(s)     : Neo-Mind                                               *
*   Created Date  : 2020-11-12                                             *
*   Last Modified : 2021-03-02                                             *
*                                                                          *
\**************************************************************************/

///
/// \brief Change the conditional jump to JMP after Langtype Comparisons in Char Deletion function
///        and the one which shows MsgBox. For recent clients a conditional MOV is used which needs to be NOPed
///
DeleteCharWithEmail = function()
{
	/// 1.1 - Ensure the LANGTYPE is loaded
	LANGTYPE.load();

	/// 1.2 - Find the Langtype comparison in Char Delete function (name not known right now)
	let prefix =
		MOV(EAX, [LANGTYPE]) //MOV EAX, DWORD PTR DS:[g_serviceType]
	+	ADD(ESP, 8)          //ADD ESP,8
	+	CMP(EAX, 0xA)        //CMP EAX,0A
	;

	let suffix =
		JE(WCp)              //JE SHORT addr -> do the one for Email
	+	CMP(EAX, 0xC)		 //CMP EAX,0C
	+	JE(WCp)              //JE SHORT addr -> do the one for Email
	;

	let addr = Exe.FindHex(prefix + suffix);
	if (addr < 0 && Exe.BuildDate > 20170000)
	{
		prefix =
			JMP(WCp)		 //JMP SHORT addr2
		+	CMP(R32, 0xA)	 //CMP reg32,0A
		;

		suffix =
			JE(WCp)          //JE SHORT addr -> do the one for Email
		+	CMP(R32, 0xC)	 //CMP reg32,0c
		+	JE(WCp)          //JE SHORT addr -> do the one for Email
		+	CMP(R32, 0x1)	 //CMP reg32,1
		+	JE(WCp)          //JE SHORT addr -> do the one for Email
		;

		addr = Exe.FindHex(prefix + suffix);
	}
	if (addr < 0)
		throw Error("Langtype comparison not found");

	/// 1.3 - Enforce the first conditional jump
	Exe.SetJMP(addr + prefix.byteCount());

	if (Exe.Version <= 11) //VC6 - VC11
	{
		/// 2.1 - Find the Langtype comparison for MsgBox String
		let code =
			PUSH_0       //PUSH 0
		+	JNE(7)       //JNE SHORT addr -> PUSH 12B
		+	PUSH(POS2WC) //PUSH 717 or 718 or 12E - the MsgString ID changes between clients
		+	JMP(5)       //JMP SHORT addr2 -> CALL MsgStr
		+	PUSH(0x12B)  //PUSH 12B
		;

		addr = Exe.FindHex(code);
		if (addr < 0)
			throw Error("2nd Langtype comparison not found");

		/// 2.2 - Change the conditional jump
		Exe.SetJMP(addr + 2);
	}
	else //VC14.16
	{
		/// 3.1 - Find the Langtype comparison for MsgBox String
		prefix =
			CMP([LANGTYPE], 0)  //CMP DWORD PTR DS:[g_serviceType], 0
		+	MOV(R32, 0x717)     //MOV reg32_B, 717
		+	MOV(R32, 0x12B)     //MOV reg32_A, 12B
		;

		suffix =
			CMOVE(R32, R32)     //CMOVE reg32_A, reg32_B
		+	PUSH_R              //PUSH reg32_A
		;

		addr = Exe.FindHex(prefix + suffix);
		if (addr < 0)
			throw Error("2nd Langtype comparison not found (VC14.16)");

		/// 3.2 - NOP out the Conditional MOV
		Exe.SetNOPs(addr + prefix.byteCount(), 3);
	}

	return true;
};
